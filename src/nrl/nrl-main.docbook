<?xml version="1.0" encoding="UTF-8"?>
<section id="nrl:sec-ontology-visualization" xmlns="http://docbook.org/ns/docbook">
	<title>Ontology Visualization</title>
	
	
		<figure id="nrl:fig-nrl-ontology-visualization">
		<ulink url="nrl-ontology-visualization.png">
			<mediaobject>
				<imageobject role="html">
					<imagedata fileref="nrl-ontology-visualization.png" scale="85"/>
				</imageobject>
			</mediaobject>
		</ulink>
		</figure>
	
</section>

<section id="nrl:sec-introduction" xmlns="http://docbook.org/ns/docbook">
	<title>Introduction</title>
	  
	<para>NRL is based on a number of key concepts, some of which are identical to concepts defined in earlier work. Other concepts are fundamentally the same to ones in existant work, but differ slightly in definition, while some concepts are a fresh approach to data representation. The key concepts are RDF triple, Named Graph and Graph Views and they are introduced in this section.</para>
	  
	<para>The basic concept is the RDF triple and the definition is fundamentally similar to the one given in [<link linkend="nrl:sec-references">RDF Specification - CONCEPTS</link>] where a triple consists of three components:</para>
      
      	<itemizedlist>
		<listitem>a subject - in the form of a URI Reference</listitem>
		<listitem>a predicate - in the form of a URI Reference</listitem>
		<listitem>an object - in the form of either a URI Reference or a literal</listitem>
	</itemizedlist>
	
	<para>where the predicate denotes the relationship between the subject and the object. The only difference is that in NRL it is not expected that a blank node manifests itself as either a subject or an object of a triple [See <xref linkend="nrl:sec-blank-nodes" />]. </para>
	
	<para>An RDF Graph consists of a set of triples. The definition is similar to the one given in [<link linkend="nrl:sec-references">RDF Specification - CONCEPTS</link>]. A Named Graph is an RDF Graph identified by a name. In NRL, all RDF triples must be assigned to at least one named graph. Triples that are not, are automatically assigned to a special named graph, the [<xref linkend="nrl:DefaultGraph"/>]. Therefore, NRL data handling is usually defined in terms of named graphs rather than RDF triples. The formal definition for a named graph is the same as that given in [<link linkend="nrl:sec-references">NAMED GRAPHS</link>] but excludes the open-world assumption [See <xref linkend="nrl:sec-nrl-and-closed-world-vs-open-world-assumptions"/>]. Named graphs differ in content and purpose, and for this reason Graph Roles have been introduced, representing general roles like simple data, ontology, knowledge base, plus other less generic roles. Graph roles carry Declarative Semantics, which means that their semantics are implicit and have not necessarily been realized (in the form of inferred triples). A more elaborate definition, syntax specification and example section for named graphs is given in Named Graph Extensions [<xref linkend="nrl:sec-handling-multiple-models-nrl-named-graph-extensions"/>].</para>

	<para>A named graph consists of the corresponding triple set as is, and retrieving RDF triples from a named graph, will simply return the enumerated triples in the set. However it is frequently required to work with graphs having realized semantics in the form of entailment triples, according to some declared semantics. Additionaly, it is sometimes required to work with more abstract, simplified forms of a graph. In general, it is useful to work with various interpretations of a named graph in different situations. However, in order to preserve the integrity and consistency of named graphs, an original named graph should be independent of its interpretations. To model this, one can define arbitrary views which realize different interpretations for an established named graph. We call these interpretations Graph Views and they are formally defined in Graph Views Extensions [<xref linkend="nrl:sec-imposing-semantics-on-and-tailoring-of-graphs-nrl-graph-views-extensions"/>]. Graph views are themselves named graphs, so it is possible for a view to be applied on top of another graph view. View Specifications define how a view is to be computed and they can refer either to a set of rules in some rule language, or to an external application. Some view specifications realize the Procedural Semantics of a graph, and the result is a Semantic View, having both declarative and procedural semantics. Conceptually, a graph gcan be given a semantics by applying a semantic realizing view v,which is linked to some semantic specifications. Practically, if the semantics specifications are those for NRL, and these state that some of the applied semantics are transitive (e.g. rdfs:subClass) this would imply that vwill be the extension of g with the inferred triples generated by performing the transitive closure.</para>

	<para>The following figure presents the important aspects of the NRL language, including the key concepts just described and their relationships. The diagram is partitioned in the (abstract) syntax on which it is defined (right), and the formal semantics (left) to which it is linked to. The NRL domain is depicted by the grey shaded part. Notice that NRL is not limited to the syntax partition, since it includes NRL formal semantics defined in [<xref linkend="nrl:sec-nrl-semantics"/>]. The NRL syntax is composed of a base langugage and a schema language. The base language refers to the specification of the key concepts in the language, including named graphs, graph roles and graph views while the schema language (NRL Schema) provides the means to define schemas (especially information models and ontologies). The semantics partition mainly distinguishes between abstract declarative semantics, and realized procedural semantics.</para>
	
	<figure id="nrl:fig-nrl-overview" xreflabel="Figure 1">
		<mediaobject>
			<imageobject role="html">
				<imagedata fileref="nrl-overview.png" scalefit="1"/>
			</imageobject>
			<caption>Figure 1: Overview of NRL - Abstract Syntax, Concepts and Semantics</caption>	
		</mediaobject>
	</figure>
  
	<para> The syntax schema consists of the NRL Schema, which is based on an extended RDFS (RDFS&apos;). The syntax base presents the key concepts of NRL as a set abstraction. Named graphs, consisting of RDF Triples, are the most general set (red) since both graph roles and graph views are special kinds of named graphs. Graph Roles (yellow) are tied to declarative semantics that they assume (e.g. an ontology using elements from RDF/S). Graph Views (green) are tied to view specifications which execute the view&apos;s realization. The intersection between graph roles and graph views refers to semantic views. These special views realize the declarative semantics of the graph role they are interpreting (e.g. by extending an ontology that uses rdfs:subClassOf by its transitive closure as defined in RDF/S Semantics). Thus, as shown on the left hand side of the figure, semantic view specifications carry the realized procedural semantics for a view, which are linked to the abstract declarative semantics of a language.</para>
      
	<para><xref linkend="nrl:fig-nrl-dataflow"/> shows how the theoritical basis of NRL can be applied in practice to handle RDF data. Data handling includes creation, merging, interpretation and presentation of RDF data. It presents the dataflow for some typical NRL data and how the various concepts introduced earlier can be effectively used to model RDF data and use it in different scenarios in a sound but intuitive way. The example sections for the Named Graph extensions [<xref linkend="nrl:sec-named-graph-example"/>] and the Graph Views extensions [<xref linkend="nrl:sec-graph-views-example"/>] present examples that model the dataflow in this figure in TriG syntax [<link linkend="nrl:sec-references">TRIG</link>]. TriG is a straight-forward extension of Turtle [<link linkend="nrl:sec-references">TURTLE</link>]. Turtle itself is an extension of N-Triples [<link linkend="nrl:sec-references">N-TRIPLES</link>] which carefully takes the most useful and appropriate things added from Notation3 [<link linkend="nrl:sec-references">NOTATION3</link>] while keeping it in the RDF model. TriG is a plain text format created for serializing NGs and RDF Datasets.</para>
      
	<para>The dataflow is based on four existing named graphs, two having the role of [<xref linkend="nrl:Ontology"/>] (ontologies O1 and O2) and the other two that of [<xref linkend="nrl:InstanceBase"/>] (instance bases I1 and I2). A new named graph, O, is also defined as having the role of [<xref linkend="nrl:Ontology"/>] and by using the property [<xref linkend="nrl:imports"/>] it is defined as being the supergraph of both O1 and O2. This constitutes an ontology merge for O1 and O2 into O. Similarly, a new named graph, KB, is defined to have the role of [<xref linkend="nrl:KnowledgeBase"/>] and  is defined as the supergraph of O, I1 and I2. Therefore, KB consists of all RDF triples in O1, O2, I1 and I2.</para>

      <figure id="nrl:fig-nrl-dataflow" xreflabel="Figure 2">
        <mediaobject>
          <imageobject role="html">
            <imagedata fileref="nrl-dataflow.png" scalefit="1"/>
          </imageobject>
        </mediaobject>
        <caption>Figure 2: NRL Dataflow diagram</caption>
      </figure>
      
	<para> An RDF programmer would like to work with an extension of KB that includes also the realized semantics that KB is implicitly carrying. To generate this extension, or view, the RDF programmer can define an instance of [<xref linkend="nrl:ViewSpecification"/>] that computes and returns the procedural semantics for KB. The view specification uses a rule language of choice that provides a number of rules, one of which computes the transitive closure of rdfs:subClassOf, as defined in the RDFS semantics, for a set of RDF triples. Executing the chosen rules over the triples in KB result in a semantic view RDFS(KB) consisting of the RDF triples in KB plus the generated entailment triples.</para>
      
      <para>Next, the RDF programmer needs to present some of this extended data to an average user in a simplified way. In particular, the user would at some point like to see the class hierarchy present in RDFS(KB). The RDF programmer can create external view specifications, in the form of applications which take a named graph as input (a set of RDF triples), and return the desired RDF triples as output. In this case, an external view specification, E1, is created and designed to select and return the triples defining the class hierarchy within an input named graph. The view generated by this application, E1(RDFS(KB)), which is basically another named graph, is the data required for presentation to the user. It is worth to note, that at this stage, all the seven named graphs that this last viewis generated upon are still intact and they have not been modified by any of the operations.</para>
     
	<section id="nrl:sec-requirements">
		<title>Requirements</title>
		
		<para>In this section we specify the original identified requirements for a Representational Language (excluding requirements that are domain-dependent) and whether their fulfillment was successful or otherwise.</para>
		
		<para>The following requirements have been satisfied:</para>
		<itemizedlist>
			<listitem>Tool support for inferencing, interpretation, manipulation and storage.</listitem>
			<listitem>NRL should allow for validation of ontologies.</listitem>
			<listitem>Basic subClassOf, type, and inverseProperty inference has to be computable efficiently.</listitem>
			<listitem>Domain and Range properties must be adhered to and verified. [See domain and range usage <xref linkend="nrl:sec-recommendations-for-and-against-the-use-of-rdfs-elements"/>]</listitem>
			<listitem>Properties must support cardinality requirements. [See <xref linkend="nrl:cardinality"/>, <xref linkend="nrl:minCardinality"/> and <xref linkend="nrl:maxCardinality"/>]</listitem>
			<listitem>Representation of ontology models. [See graph role <xref linkend="nrl:Ontology"/>]</listitem>
			<listitem>Ontology imports must be possible. Ontology management must be provided. [See named graph property [<xref linkend="nrl:imports"/>]</listitem>
			<listitem>Support for Quads/Named Graphs to record provenance. [See <xref linkend="nrl:sec-handling-multiple-models-nrl-named-graph-extensions"/>]</listitem>
		</itemizedlist>
	
		<para>The following requirements are no longer in the scope of the NRL but in that of lower-level ontologies:</para>
		<itemizedlist>
			<listitem>The language must differentiate between concepts and web-resources. [See <link linkend="nrl:sec-deprecated-elements">nrl:Thing</link> and <link linkend="nrl:sec-deprecated-elements">nrl:ResourceManifestation</link>]</listitem>
			<listitem>Meta-modeling needs to be supported. [See <link linkend="nrl:sec-deprecated-elements">nrl:NRLClass</link> and <link linkend="nrl:sec-deprecated-elements">nrl:NRLProperty</link>]</listitem>
			<listitem>Support for alternative labels (thesauri helpers) alongside labels is required. [See alternative labels property  <link linkend="nrl:sec-deprecated-elements">nrl:altLabel</link></listitem>
			<listitem>n-ary relations should be supported. [See <link linkend="nrl:sec-deprecated-elements"> nrl:relationProperty</link>]</listitem>
			<listitem>It must provide some basic semantic relations. [See <link linkend="nrl:sec-deprecated-elements">nrl:partOf</link>, <link linkend="nrl:sec-deprecated-elements">nrl:hasTopic</link> and <link linkend="nrl:sec-deprecated-elements"> nrl:relationProperty</link>]</listitem>
			<listitem>Typing on reifications and contexts.</listitem>
		</itemizedlist>
	
		<para>The following requirements have not been satisfied:</para>
		<itemizedlist>
			<listitem>Support for imprecise/fuzzy/probabilistic representations.</listitem>
		</itemizedlist>
		
		<para>Note: The fulfillment of this requirement will be postponed until a non-imprecise version of NRL is stable.</para>
		<para>The following requirement has been retracted:</para>
		<itemizedlist>
			<listitem>Typing on container contents. Containers are to be avoided altogether. [See Recommendation <xref linkend="nrl:sec-recommendations-for-and-against-the-use-of-rdfs-elements"/></listitem>
		</itemizedlist>
	</section>
	
	<section id="nrl:sec-rdfs-and-nrl-compatibility">
		<title>RDF/S and NRL Compatibility</title>
		<para>This specification provides some recommendations as to the use of some RDF/S elements or constructs [<xref linkend="nrl:sec-recommendations-for-and-against-the-use-of-rdfs-elements"/>]. It must be noted that if these recommendations are not followed, this still results in <emphasis>legal</emphasis> RDF/S data and therefore <emphasis>legal</emphasis> NRL data. However this does not imply that such data would be <emphasis>valid</emphasis> NRL data. Although such data would conform to the RDF/S specifications, correct manipulation of invalid NRL data is not guaranteed if the recommendations are not followed. This also applies to RDF/S data that is imported in an NRL context (e.g. RDF/S data imported on one&apos;s semantic desktop). In a more technical sense, legal NRL would be processed without generating errors, but only valid NRL would be processed without generating warnings.</para>
		
		<para>Since NRL is based on the Named Graph paradigm [See <xref linkend="nrl:sec-handling-multiple-models-nrl-named-graph-extensions"/>], NRL data cannot be directly represented with plain RDF/S since NG&apos;s are an extension on top of RDF/S. Therefore NRL with named graphs is not backward compatible to RDF/S. It is compatible however with Named Graphs as specified in [<link linkend="nrl:sec-references">SPARQL-QUERY</link>].</para>
	</section>

	<section id="nrl:sec-naming">
		<title>Naming</title>
		<para>The URI for the NRL Vocabulary is <ulink url="http://www.semanticdesktop.org/ontologies/nrl#">http://www.semanticdesktop.org/ontologies/yyyy/mm/dd/nrl#</ulink> subject to the date of the latest stable version.</para>
		
		<para>The URI for an element in the vocabulary is constructed by appending a fragment identifier to the above URI. A fragment identifier for a class always starts with an uppercase letter while in the case of properties it starts with a lowercase letter. In the case of class identifiers consisting of multiple words, the leading character of each word will be an uppercase letter. In case of property identifiers consisting of multiple words, the leading character of each word will be an uppercase letter, except for the first word which as specified should be in lowercase.</para>
		
		<para>
			<emphasis>Examples</emphasis>
			<informaltable frame="all">
				<tgroup cols="1">
				<colspec colname="c1" colwidth="100*"/>
					<tbody>
						<row>
						  <entry>
						  	<para>http://www.semanticdesktop.org/ontology/yyyy/mm/dd/nrl#Class</para><para>http://www.semanticdesktop.org/ontology/yyyy/mm/dd/nrl#ExampleClass</para>
						  	<para>http://www.semanticdesktop.org/ontology/yyyy/mm/dd/nrl#property</para><para>http://www.semanticdesktop.org/ontology/yyyy/mm/dd/nrl#exampleProperty</para>
						  </entry>
						</row>
					</tbody>
				</tgroup>
			</informaltable>
		</para>
	</section>
	
	<section id="nrl:sec-persistence">
        	<title>Persistence</title>
        	<para>The NRL Vocabulary specification defined here and any previous or later versions, plus the NRL ontology itself [<ulink url="http://nepomuk.org/ontologies/nrl">http://www.semanticdesktop.org/ontology/yyyy/mm/dd/nrl#</ulink>] will be provided as persistent resources.</para>
	</section>
	
	<section id="nrl:sec-social-semantic-desktop-ontologies">
		<title>Social Semantic Desktop Ontologies</title>
		
		<para>Ontologies are structured in various layers or levels, with the rationale that those at higher levels are more stable and thus change less often than those at lower levels. Usually, one distinguishes representational ontologies, upper-level ontologies, mid-level ontologies, and domain ontologies.</para>
		
        	<para>The NRL is a representational ontology and although it is domain independent it was designed to fulfil requirement for the NEPOMUK Social Semantic Desktop initiative. Representational ontologies define the vocabulary with which other ontologies are represented. Other examples of such representational ontologies are RDF/S and OWL. The relationship of a representational ontology to other ontologies is quite different from the relationship between the other ontologies themselves. While upper-level ontologies generalize mid-level ontologies, which in turn generalize domain ontologies, all these ontologies can be seen as <emphasis>instances</emphasis> of the representational ontology.</para>
        	
        	<para>The specification of various other ontologies is in the pipeline for the Social Semantic Desktop project. In particular, the  following (upper-level) ontologies are being discussed:</para>
		<itemizedlist>
			<listitem>Information Element Ontology [<ulink url="http://www.semanticdesktop.org/ontologies/nie">NIE</ulink>] - to handle physical resource (e.g. documents, web pages, files etc.)</listitem>
			<listitem>Annotation Ontology [<ulink url="http://www.semanticdesktop.org/ontologies/nao">NAO</ulink>] - to handle general annotation (e.g. Data annotation, Linking abstract to physical resources) as well as graph annotation (e.g. Data authorship. etc.)</listitem>
			<listitem>Personal Information Modelling Ontology [PIMO] - to model things and relationships on the user&apos;s desktop.</listitem>
		</itemizedlist>
	</section>
	
	<section id="nrl:sec-external-ontology-synchronisation">
       		<title>External Ontology Synchronisation</title>
        	<para>The ontologies resulting from the Social Semantic Desktop project are partly inspired by existing elements in external ontologies. As a result some elements are very similar to elements in existing languages like OWL [<link linkend="nrl:sec-references">OWL Overview</link>] and [<link linkend="nrl:sec-references">OMV Documentation</link>]. Also, some RDF/S elements do not fulfil the requirements for the project&apos;s ontologies and therefore problems arise from these two scenarios. When requiring elements that already exist in some other standard ontology, but do not exactly conform to our requirements, there are the following three outlined options:</para>
        	<orderedlist>
				<listitem>Re-define semantics for use within NEPOMUK ontologies.
					<para> This creates major problem when it comes to heterogeneity issues. One cannot redefine an element if it already has a defined semantics, because when encountering such an element, it would not be possible to decide in which context to interpret it. Restrictions are a more subtle form of redefinition. In this case, any restrictions placed on the use of existing elements will result in the possibility of having Legal but Invalid data in the NEPOMUK ontologies context. See further discussions in [<xref linkend="nrl:sec-rdfs-and-nrl-compatibility"/>] in the case of NRL.</para>
				</listitem>
				
				<listitem>Re-create new elements with required semantics and ignore the existing ones.
					<para>This goes against the idea of ontologies and the Semantic Web in general, that is, to have a shared conceptualisation, promote the re-use of ontologies and discourage the re-creation of data.</para>
				</listitem>
				
				<listitem>Re-create new elements with required semantics and provide a mapping between them and the existing elements.
					<para>This option is a variant of the previous option, where although new elements are re-created, the relation between the new and the existent elements is modelled using mappings. Examples of these mappings are subclass, hyponym, meronym. Although in this case, new elements satisfying the requirements are created, the existent elements are not ignored and therefore the shared conceptualisation ideology is respected.  In the NEPOMUK ontologies, option three is the standard best practice when existent elements with different semantics are required. When requiring restriction on the use of elements, option one is sufficient since it does not violate the predefined semantics. However in this case the statement in [<xref linkend="nrl:sec-rdfs-and-nrl-compatibility"/>] should be noted. The mapping constructs required for option three will be defined over time and therefore, although theoritically the agreed-upon option is three, in practice option two is currently being implemented.</para>
				</listitem>
			</orderedlist>
      </section>
      
	<section id="nrl:sec-nrl-and-closed-world-vs-open-world-assumptions">
		<title>NRL and Closed World Vs. Open World Assumptions</title>
        	<para>The open-world assumption (OWA) presumes that its knowledge of the world is incomplete and that this lack of knowledge does not imply falsity. On the other hand, the closed-world assumption (CWA) presumes that what is not currently known to be true, is false. Whereas the OWA states that everything that is not known is undefined, the CWA implies that everything we don&apos;t know is false. </para>
        	<para>This assumption has a big impact on direct and indirect knowledge generated through RDF data. This difference is demonstrated through the following example which is based on <xref linkend="nrl:sec-handling-multiple-models-nrl-named-graph-extensions"/> and <ulink url="http://www.wiwiss.fu-berlin.de/suhl/bizer/TriG/">TriG</ulink> [TRIG]. We will consider the implications of importing the given three graphs g1, g2 and g3 into an external graph g.</para>
		<programlisting>
@prefix nrl: &lt;http://www.semanticdesktop.org/ontology/yyyy/mm/dd/nrl#&gt; . 
@prefix dom: &lt;http://www.example.org/ontology/domainOntology#&gt; . 
@prefix ex: &lt;http://www.example.org/vocabulary#&gt; .
@prefix ex2: &lt;http://www.example.org/vocabulary#&gt; .
@prefix : &lt;http://www.example.org/vocabulary#&gt; .
[1] :g1 {
    dom:Person rdf:type rdfs:Class .
    dom:Man rdf:type rdfs:Class ;
            rdfs:subClassOf dom:Person .
    dom:Woman rdf:type rdfs:Class ;
             rdf:subClassOf dom:Person .
    dom:hasFather rdf:type rdf:Property ,
                            nrl:FunctionalProperty ;
                   rdfs:domain rdf:Person ;
                   rdfs:range rdf:Man . }
[2] :g2 { 
    ex:Peter rdf:type dom:Man .
    ex:Jill rdf:type dom:Person ; 
             dom:hasFather ex:Peter . }
[3] :g3 { 
    ex2:Jack rdf:type dom:Man .
    ex:Jill dom:hasFather ex2:Jack . } 
		</programlisting>
		<para> [1] The first graph consists of an ontology and presents three classes and a property. The classes are dom:Person and its two subclasses dom:Woman and dom:Man. The property dom:hasFather is a <xref linkend="nrl:FunctionalProperty"/> applicable to class dom:Person and taking as values instances of dom:Man.</para>
        	<para> [2] The second named graph is an instance base consisting of two instances, Peter as a dom:Man and Jill as a dom:Person. In addition, the dom:hasFather relation between Jill and Peter says that Peter is Jill&apos;s father. Question: Is Jill a dom:Woman?</para>
		<para>OWA: Unknown - It is only known that Jill is a dom:Person. OWA cannot determine whether the statement is true or false. CWA: No - Jill is nowhere defined to be a dom:Woman. Therefore the statement is false. </para>
		<para>Question: Is Peter a dom:Person? </para>
		<para>OWA: Yes - Peter is a dom:Man, and this is a subclass of dom:Person. </para>
		<para>CWA: Yes - Peter is a dom:Man, and this is a subclass of dom:Person.</para>
		<para> [3] The third graph is also an instance base and presents another instance, Jack as a dom:Man. The same Jill defined in graph two, is said to have Jack as her father.</para>
		<para> Since dom:hasFather is a functional property, Jill can have only one person related to her by that property. </para>
		<para>OWA: It results that Jack and Peter are the same person. This statement is implicitly added to the data. </para>
		<para>CWA: There is conflicting data in g2 and g3. An error is generated.  The RDF language itself assumes an open-world and so does the definition for Named Graphs in [<link linkend="nrl:sec-references">NAMED GRAPHS</link>]. There is a difference of opinion on what approach is best for handling RDF data. While OWA is more flexible, and more likely to generate new statements based on ones that already exist in the models, its non-monotonic nature hinders computability and largely increases the complexity of RDF data. On the other hand, while CWA is much more prone to generate errors, it is totally deterministic and one can always compute whether any statement under the assumption is true or false.</para>
		<para>Although it is sometimes more realistic to apply OWA, the correctness of this approach is not guaranteed. In the given example, it might makes sense to leave the possibility open for the statement Jill is a woman to be true. However it might not make sense to assume that the fact Jack is Peter is intentional. Under CWA, the truth of the statements is subject to explicitally stating them.</para>
		<para>For this reason, NRL does not assume an Open World View and although NRL imposes no semantics on basic graphs, NRL semantics are CWA. Semantics are imposed on graphs through Graph Views and Semantic Views as introduced in [<xref linkend="nrl:sec-imposing-semantics-on-and-tailoring-of-graphs-nrl-graph-views-extensions"/>]. Therefore Open World Views can be realized as well by applying an OWA view to a named graph. On the Semantic Desktop in particular we assume closed-world semantics as it focuses mainly on personal data. While most people find it difficult to understand the logical meaning and potential inferences statements of the open-world assumption, the closed-world assumption is easier to understand for an average desktop user. </para>
      </section>
</section>
    
<section id="nrl:sec-representing-domain-knowledge-rdfs-and-nrl-extensions-to-rdfs" xmlns="http://docbook.org/ns/docbook">
	<title>Representing Domain Knowledge: RDF(S) and NRL Extensions to RDF(S)</title>
	
	<para>The NRL Vocabulary is an application of the [<link linkend="nrl:sec-references">Resource Description Framework</link>] (RDF) and the associated [<link linkend="nrl:sec-references">RDF Schema</link>] (RDFS). The NRL vocabulary therefore implicitly includes elements from the RDF/RDFS vocabularies. Consequently the specifications for RDF [<link linkend="nrl:sec-references">RDF Specification</link>] and RDFS should be regarded as part of this specification document. However, the NRL vocabulary defines some <xref linkend="nrl:sec-recommendations-for-and-against-the-use-of-rdfs-elements"/>on the use of RDF/RDFS elements. When using RDF/S constructs within the NRL context, these recommendations need to be respected if the generated data is to be valid NRL data (see discussion in [<xref linkend="nrl:sec-rdfs-and-nrl-compatibility"/>] regarding valid and legal NRL). In practice this means that when RDF/S constructs are used together with NRL elements (or any of their instances) one should strictly abide by the RDF/S specifications and any recommendations stated in this document.</para>
      
	<para> The rest of Section 2 is divided as follows. Summary tables of the imported RDF/RDFS elements are provided, followed by specifications of any restrictions or recommendations placed when importing into NRL.</para>
	
	<section id="nrl:sec-resource-description-framework-rdf-elements">
	<title>Resource Description Framework (RDF) Elements</title>
	<para>The following are the elements defined in RDF and implicitly forming part of the NRL. Their summary tables are categorized into Classes, Properties and other elements. The class summary table states the class name and the class’s parent class. The property summary table states the property name and the applicable domain and range. The other elements table states the element name and the element type. The tables also denote whether the elements have been imported as is, or if extensions or restrictions apply when used in the NEPOMUK context. These extensions and restrictions are specified in [<xref linkend="nrl:sec-recommendations-for-and-against-the-use-of-rdfs-elements"/>]</para>
		<section id="nrl:sec-rdf-classes">
		  <title>Classes</title>
		  <informaltable frame="all" xml:id="table27">
		    <tgroup cols="3">
		      <colspec colname="c1" colwidth="33*"/>
		      <colspec colname="c2" colwidth="33*"/>
		      <colspec colname="c3" colwidth="33*"/>
		      <tbody>
			<row>
			  <entry><emphasis>Class</emphasis></entry>
			  <entry><emphasis>Superclass</emphasis></entry>
			  <entry><emphasis>Notes</emphasis></entry>
			</row>
			<row>
			  <entry>rdf:Property</entry>
			  <entry>rdfs:Resource</entry>
			  <entry>No</entry>
			</row>
			<row>
			  <entry>rdf:Statement</entry>
			  <entry>rdfs:Resource</entry>
			  <entry>No</entry>
			</row>
			<row>
			  <entry>rdf:XMLLiteral*</entry>
			  <entry>rdfs:Literal</entry>
			  <entry>No</entry>
			</row>
			<row>
			  <entry>rdf:Bag</entry>
			  <entry>rdfs:Container</entry>
			  <entry><link linkend="nrl:sec-collections-and-containers">Yes</link></entry>
			</row>
			<row>
			  <entry>rdf:Seq</entry>
			  <entry>rdfs:Container</entry>
			  <entry><link linkend="nrl:sec-collections-and-containers">Yes</link></entry>
			</row>
			<row>
			  <entry>rdf:Alt</entry>
			  <entry>rdfs:Container</entry>
			  <entry><link linkend="nrl:sec-collections-and-containers">Yes</link></entry>
			</row>
			<row>
			  <entry>rdf:List</entry>
			  <entry>rdfs:Resource</entry>
			  <entry>No</entry>
			</row>
		      </tbody>
		    </tgroup>
		  </informaltable>
		  <para>*rdf:XMLLiteral is also an instance of rdfs:Datatype (see <xref linkend="nrl:sec-rdf-other-vocabulary"/>)</para>
		</section>
		<section id="nrl:sec-rdf-properties">
		  <title>Properties</title>
		  <informaltable frame="all" xml:id="table28">
		    <tgroup cols="4">
		      <colspec colname="c1" colwidth="25*"/>
		      <colspec colname="c2" colwidth="25*"/>
		      <colspec colname="c3" colwidth="25*"/>
		      <colspec colname="c4" colwidth="25*"/>
		      <tbody>
			<row>
			  <entry><emphasis>Property</emphasis></entry>
			  <entry><emphasis>Domain</emphasis></entry>
			  <entry><emphasis>Range</emphasis></entry>
			  <entry><emphasis>Notes</emphasis></entry>
			</row>
			<row>
			  <entry>rdf:type</entry>
			  <entry>rdfs:Resource</entry>
			  <entry>rdfs:Class</entry>
			  <entry>No</entry>
			</row>
			<row>
			  <entry>rdf:subject</entry>
			  <entry>rdf:Statement</entry>
			  <entry>rdfs:Resource</entry>
			  <entry>No</entry>
			</row>
			<row>
			  <entry>rdf:predicate</entry>
			  <entry>rdf:Statement</entry>
			  <entry>rdfs:Resource</entry>
			  <entry>No</entry>
			</row>
			<row>
			  <entry>rdf:object</entry>
			  <entry>rdf:Statement</entry>
			  <entry>rdfs:Resource</entry>
			  <entry>No</entry>
			</row>
			<row>
			  <entry>rdf:value</entry>
			  <entry>rdfs:Resource</entry>
			  <entry>rdfs:Resource</entry>
			  <entry>No</entry>
			</row>
			<row>
			  <entry>rdf:first</entry>
			  <entry>rdf:List</entry>
			  <entry>rdfs:Resource</entry>
			  <entry>No</entry>
			</row>
			<row>
			  <entry>rdf:rest</entry>
			  <entry>rdf:List</entry>
			  <entry>rdf:List</entry>
			  <entry>No</entry>
			</row>
		      </tbody>
		    </tgroup>
		  </informaltable>
		</section>
        <section id="nrl:sec-rdf-other-vocabulary">
          <title>Other Vocabulary</title>
          <informaltable frame="all" xml:id="table29">
            <tgroup cols="3">
              <colspec colname="c1" colwidth="33*"/>
              <colspec colname="c2" colwidth="33*"/>
              <colspec colname="c3" colwidth="33*"/>
              <tbody>
                <row>
                  <entry><emphasis>Name</emphasis></entry>
                  <entry><emphasis>Type</emphasis></entry>
                  <entry><emphasis>Notes</emphasis></entry>
                </row>
                <row>
                  <entry>rdf:nil</entry>
                  <entry>rdfs:List</entry>
                  <entry>No</entry>
                </row>
                <row>
                  <entry>rdf:XMLLiteral</entry>
                  <entry>rdfs:Datatype</entry>
                  <entry>No</entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>
        </section>
      </section>
      <section id="nrl:sec-rdf-schema-rdfs-elements">
        <title>RDF Schema (RDFS) Elements</title>
        <para>The following are the elements defined in RDFS and implicitly forming part of the NRL. Their summary tables are categorized into Classes and Properties. The class summary table states the class name and the class’s parent class. The property summary table states the property name and the applicable domain and range. The tables also denote whether the elements have been imported as is, or if extensions apply when used in the NRL context. These extensions are specified in [<xref linkend="nrl:sec-recommendations-for-and-against-the-use-of-rdfs-elements"/>]</para>
        <section id="nrl:sec-rdfs-classes">
          <title>Classes</title>
          <informaltable frame="all" xml:id="table30">
            <tgroup cols="3">
              <colspec colname="c1" colwidth="33*"/>
              <colspec colname="c2" colwidth="33*"/>
              <colspec colname="c3" colwidth="33*"/>
              <tbody>
                <row>
                  <entry><para><emphasis>Class</emphasis></para></entry>
                  <entry><para><emphasis>Superclass</emphasis></para></entry>
                  <entry><para><emphasis>Notes</emphasis></para></entry>
                </row>
                <row>
                  <entry><para>rdfs:Resource</para></entry>
                  <entry><para>rdfs:Resource</para></entry>
                  <entry><para>No</para></entry>
                </row>
                <row>
                  <entry><para>rdfs:Class</para></entry>
                  <entry><para>rdfs:Resource</para></entry>
                  <entry><para>No</para></entry>
                </row>
                <row>
                  <entry><para>rdfs:Datatype</para></entry>
                  <entry><para>rdfs:Class</para></entry>
                  <entry><para>No</para></entry>
                </row>
                <row>
                  <entry><para>rdfs:Container</para></entry>
                  <entry><para>rdfs:Resource</para></entry>
                  <entry><para><link linkend="nrl:sec-collections-and-containers">Yes</link></para></entry>
                </row>
                <row>
                  <entry><para>rdfs:Literal</para></entry>
                  <entry><para>rdfs:Resource</para></entry>
                  <entry><para>No</para></entry>
                </row>
                <row>
                  <entry><para>rdfs:ContainerMembershipProperty</para></entry>
                  <entry><para>rdf:Property</para></entry>
                  <entry><para><link linkend="nrl:sec-collections-and-containers">Yes</link></para></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>
        </section>
        <section id="nrl:sec-rdfs-properties">
          <title>Properties</title>
          <informaltable frame="all" xml:id="table31">
            <tgroup cols="4">
              <colspec colname="c1" colwidth="25*"/>
              <colspec colname="c2" colwidth="25*"/>
              <colspec colname="c3" colwidth="25*"/>
              <colspec colname="c4" colwidth="25*"/>
              <tbody>
                <row>
                  <entry><para><emphasis>Property</emphasis></para></entry>
                  <entry><para><emphasis>Domain</emphasis></para></entry>
                  <entry><para><emphasis>Range</emphasis></para></entry>
                  <entry><para><emphasis>Notes</emphasis></para></entry>
                </row>
                <row>
                  <entry><para>rdfs:domain</para></entry>
                  <entry><para>rdf:Property</para></entry>
                  <entry><para>rdfs:Class</para></entry>
                  <entry><para><link linkend="nrl:sec-rdfs-domain-rdfs-range">Yes</link></para></entry>
                </row>
                <row>
                  <entry><para>rdfs:range</para></entry>
                  <entry><para>rdf:Property</para></entry>
                  <entry><para>rdfs:Class</para></entry>
                  <entry><para><link linkend="nrl:sec-rdfs-domain-rdfs-range">Yes</link></para></entry>
                </row>
                <row>
                  <entry><para>rdfs:subClassOf</para></entry>
                  <entry><para>rdfs:Class</para></entry>
                  <entry><para>rdfs:Class</para></entry>
                  <entry><para>No</para></entry>
                </row>
                <row>
                  <entry><para>rdfs:subPropertyOf</para></entry>
                  <entry><para>rdf:Property</para></entry>
                  <entry><para>rdf:Property</para></entry>
                  <entry><para>No</para></entry>
                </row>
                <row>
                  <entry><para>rdfs:member</para></entry>
                  <entry><para>rdfs:Resource</para></entry>
                  <entry><para>rdfs:Resource</para></entry>
                  <entry><para><link linkend="nrl:sec-collections-and-containers">Yes</link></para></entry>
                </row>
                <row>
                  <entry><para>rdfs:isDefinedBy*</para></entry>
                  <entry><para>rdfs:Resource</para></entry>
                  <entry><para>rdfs:Resource</para></entry>
                  <entry><para><link linkend="rdfs:isDefinedBy">Yes</link></para></entry>
                </row>
                <row>
                  <entry><para>rdfs:label</para></entry>
                  <entry><para>rdfs:Resource</para></entry>
                  <entry><para>rdfs:Literal</para></entry>
                  <entry><para>No</para></entry>
                </row>
                <row>
                  <entry><para>rdfs:comment</para></entry>
                  <entry><para>rdfs:Resource</para></entry>
                  <entry><para>rdfs:Literal</para></entry>
                  <entry><para>No</para></entry>
                </row>
                <row>
                  <entry><para>rdfs:seeAlso</para></entry>
                  <entry><para>rdfs:Resource</para></entry>
                  <entry><para>rdfs:Resource</para></entry>
                  <entry><para>No</para></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>
          <para>*rdfs:isDefinedBy is a sub property of rdfs:seeAlso</para>
        </section>
      </section>
      <section id="nrl:sec-recommendations-for-and-against-the-use-of-rdfs-elements">
        <title>Recommendations for and against the use of RDF/S elements</title>
        <para>As discussed earlier [<xref linkend="nrl:sec-rdfs-and-nrl-compatibility"/>] although any legal RDF is also legal NRL, it is not necessarily valid NRL. In order for NRL to be valid, these recommendations must be strictly adhered to.</para>
		<section id="nrl:sec-rdfs-domain-rdfs-range">
			<title>rdfs:domain, rdfs:range</title>
			<para>The fact that NRL does not assume open-world has an impact on the way some constructs should be used. This is especially true for the rdfs:domain and the rdfs:range elements. In an open-world scenario, when using a property to relate two resources, one is implicitly casting the type of those resources to the types specified in the property’s domain and range definition. In other words the use of a property evokes additional implicit statements about the types of the objects being related, even if these types are different than the types that have been predefined for the objects, if at all. In a closed-world scenario as on the semantic desktop this is not possible since in order to relate two resources, their types must fit the expected domain and range in the first place. This also means that untyped resources cannot be related. Failure to do so will generate legal yet invalid NRL data on the semantic desktop. This recommendation has a major bearing on the validity of logical inference mechanisms in place within NRL and therefore must be strictly adhered to.</para>

			<para><emphasis>Recommendation:</emphasis>The domain and range constraints for properties must be strictly adhered to. Untyped resources cannot be related through a property, since the types of the related resources must explicitly satisfy the constraints set by rdfs:domain and rdfs:range given NRL is not OWA. </para>

			<para><emphasis>Examples</emphasis> In these examples and the ones that follow throughout the document, we use the example namespace for user-generated data http://mydesktop.org/mydesktop#. The example namespace abbreviation can be defined as follows. To improve the readability of examples, the user namespace abbreviation is sometimes excluded. In these cases, the elements are given in italics.</para>
			
			<programlisting>
@prefix rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; .
@prefix rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt; .
@prefix nrl: &lt;http://www.semanticdesktop.org/ontology/yyyy/mm/dd/nrl#&gt; .
@prefix voc: &lt;http://www.semanticdesktop.org/ontology/desktop#&gt; .
...
@prefix desktop: &lt;http://mydesktop.org/mydesktop#&gt;
...
			</programlisting>
			<para> [1] Within the Ontology Desktop the property voc:depicts is assigned a domain of voc:ImageFile and a range of voc:Person.</para>
			<para> [2] desktop:Myself is defined as an instance of voc:Person.</para>
			<para> [3] desktop:MyFriend is defined as an instance of voc:Friend.</para>
			<para> [4] desktop:PassportPhoto is defined as an instance of voc:ImageFile. It is related to desktop:Myself through the voc:depicts property. This is valid usage of the rdfs:domain and rdfs:range as defined in [1] and is valid NRL data, since the types of both resources being related have been stated and they fit the domain and range constraints.</para>
			<para> [5] desktop:Friend20060613 is defined as an instance of voc:ImageFile. It is related to desktop:MyFriend through the voc:depicts property. It is nowhere stated that the class voc:Friend is a subclass of voc:Person. This is legal, but not valid usage of the rdfs:domain and rdfs:range as defined in [1]. Given the closed-world assumption, it cannot be determined whether the statement &apos;desktop:MyFriend is voc:Person&apos; is true. Note that if voc:Friend was defined as a subclass of voc:Person,  the statement would become true and therefore the NRL data would be both legal and valid.</para>
			
			<programlisting>
[1] :o1 {
			...
			voc:depicts rdf:type rdf:Property ;
			rdf:domain voc:ImageFile ;
			rdf:range voc:Person . }
    :ib1 { 
			...
			[2] desktop:Myself rdf:type voc:Person .
			[3] desktop:MyFriend rdf:type voc:Friend .
			[4] desktop:PassportPhoto rdf:type voc:ImageFile;
						voc:depicts desktop:Myself .
			[5] desktop:Friend20060613 rdf:type voc:ImageFile ;
						voc:depicts desktop:MyFriend . }
			</programlisting>
		</section>	
		
		<section id="nrl:sec-blank-nodes">
			<title>Blank Nodes</title>
			<para>The use of blank nodes in conjunction with NRL elements and their instances is strongly discouraged. Blank nodes are semantically difficult to handle and as a result it is difficult to implement them correctly.</para>		  
			<para><emphasis>Recommendation:</emphasis> The use of blank nodes is strongly discouraged. Data containing blank nodes is legal but not valid NRL data.</para>
		</section>
		
		<section id="nrl:sec-collections-and-containers">
			<title>Collections and Containers</title>
		
			<para>Container classes are deprecated because the semantics of containers are not clear and they are also difficult to handle. The sole use of either containers or collections is sufficient to model grouped resources. Since the semantics of collections are clearer, the use of containers is discouraged in favour of collections.</para>
			
			<orderedlist>
				<listitem>rdf:Bag is a container class whose use is discouraged.</listitem>
				<listitem>rdf:Alt is a container class whose use is discouraged.</listitem>
				<listitem>rdf:Seq is a container class whose use is discouraged.</listitem>
				<listitem>rdfs:Container is the superclass of rdf:Bag, rdf:Alt and rdf:Seq, and is not applicable to any other RDF/S or NRL element.</listitem>
				<listitem>rdfs:ContainerMembershipProperty is used to indicate the membership of rdf:Bag, rdf:Alt and rdf:Seq, and is not applicable to any other RDF/S or NRL element.</listitem>
				<listitem>rdfs:member is a super property of the container membership properties, and is not applicable to any other RDF/S or NRL element.</listitem>
			</orderedlist>
			
			<para><emphasis>Recommendation:</emphasis> The use elements numbered [1] through [6] is strongly discouraged.</para>
			
			<para>Although the use of container classes and properties is discouraged, resources can still be grouped using [<ulink url="http://www.w3.org/TR/rdf-schema/#ch_collectionvocab">RDFS Collections</ulink>] constructs.</para>
			
			<orderedlist>
				<listitem>rdf:List is a class that can be used to build descriptions of collections. A collection typically is composed of one or more lists.</listitem>
				<listitem>rdf:first is a property that relates a list to its first element.</listitem>
				<listitem>rdf:rest is a property that relates a list to the rest of the elements excluding the first element. The rest of the elements are in the form of another list.</listitem>
				<listitem>rdf:nil is a property that can be used to create an empty list. This is usually the last list in a collection.</listitem>
			</orderedlist>
			<para><emphasis>Recommendation:</emphasis> The combined use of elements numbered [1] through [4] is encouraged as an alternative to container elements </para>
		</section>
		
		<section id="rdfs:isDefinedBy">
			<title>rdfs:isDefinedBy</title>
			<para>The semantics of this element is unclear and therefore it is discouraged. The definition vaguely allows the use of this property to relate any two resources.</para>
		  	<para><emphasis>Recommendation:</emphasis> The use of rdfs:isDefinedBy is strongly discouraged. Data containing statements using this property is legal but not valid NRL data.</para>
		</section>
		
		<section id="nrl:sec-reification">
			<title>Reification</title>
			<para>The named graphs paradigm provides all the functionality required to be able to state things about other statements. Consequently, the idea of reification within the NRL context is redundant.</para>
			<para><emphasis>Recommendation:</emphasis>The use of reification is strongly discouraged.</para>
		</section>
	</section>
	<section id="nrl:sec-constraint-extensions">
		<title>Constraint Extensions</title>
		
		<para>This section presents extensions used to make statements about constraints on the use of properties in NRL data. These extensions provide further functionalities to the basic constraints provided by RDFS, namely [<ulink url="http://www.w3.org/TR/rdf-schema/#ch_domain">rdfs:domain</ulink>] and [<ulink url="http://www.w3.org/TR/rdf-schema/#ch_range">rdfs:range</ulink>]. The latter two constraints place a limitation on the class type of the resources that a property can relate (class typeconstraints).The NRL constraint extensions in turn place a limitation on the amount of values that a property can take (range cardinality constraints) and on actual pairs of resources that the property should or should not, through inference, relate (resource relation constraints). These three categories are summarized in [<xref linkend="nrl:table-1"/>]. Similarly to RDFS, NRL provides a mechanism for describing these constraints, but does not say whether or how an application must process the constraint information. In particular, in the Social Semantic Desktop scenario, different applications will use the constraints in different ways. NRL Validators will be expected to check for errors, interactive editors to suggest legal values, and reasoners to perform inference and inconsistency checks.</para>

		<informaltable frame="all" id="nrl:table-1" xreflabel="Table 1">
		  <tgroup cols="3">
		    <colspec colname="c1" colwidth="20*"/>
		    <colspec colname="c2" colwidth="20*"/>
		    <colspec colname="c3" colwidth="20*"/>
		    <tbody>
		      <row>
		        <entry>Class Type Constraints</entry>
		        <entry>Range Cardinality Constraints</entry>
		        <entry>Resource Relation Constraints</entry>
		      </row>
		      <row>
		        <entry>rdfs:domain</entry>
		        <entry><xref linkend="nrl:cardinality"/></entry>
		        <entry><xref linkend="nrl:TransitiveProperty"/></entry>
		      </row>
		      <row>
		        <entry>rdfs:range</entry>
		        <entry><xref linkend="nrl:minCardinality"/></entry>
		        <entry><xref linkend="nrl:SymmetricProperty"/></entry>
		      </row>
		      <row>
		        <entry/>
		        <entry><xref linkend="nrl:maxCardinality"/></entry>
		        <entry><xref linkend="nrl:AsymmetricProperty"/></entry>
		      </row>
		      <row>
		        <entry/>
		        <entry/>
		        <entry><xref linkend="nrl:ReflexiveProperty"/></entry>
		      </row>
		      <row>
		        <entry/>
		        <entry/>
		        <entry><xref linkend="nrl:inverseProperty"/></entry>
		      </row>
		      <row>
		        <entry/>
		        <entry/>
		        <entry><xref linkend="nrl:FunctionalProperty"/></entry>
		      </row>
		      <row>
		        <entry/>
		        <entry/>
		        <entry><xref linkend="nrl:InverseFunctionalProperty"/></entry>
		      </row>
		    </tbody>
		  </tgroup>
		  <caption>Table 1: NRL Constraints </caption>
		</informaltable>
		<para> It should be noted, that the recommendation given for the RDFS constraints in [<xref linkend="nrl:sec-rdfs-domain-rdfs-range"/>] is extended to the NRL constraint extensions. Given a possible closed-world view, in order to generate valid NRL data a user (human or machine) should check, prior to using a property, whether the resources are indeed valid candidates which satisfy the constraints.</para>
		
       	<para>The following are the classes ([<xref linkend="nrl:TransitiveProperty"/>] - [<xref linkend="nrl:InverseFunctionalProperty"/>) and properties ([<xref linkend="nrl:cardinality"/>] - [<xref linkend="nrl:inverseProperty"/>]) provided in NRL as constraint extensions to RDF/S. </para>
       		
		<variablelist>
			<varlistentry>
			<term>nrl:TransitiveProperty</term>
				<listitem>
				<para>Properties may be defined to be transitive. If a transitive property relates resource X to resource Y as well as Y to resource Z, then it follows that the property also relates X to Z. Semantic views can realize these declarative semantics by generating entailment triples. This class is similar to [<ulink url="http://www.w3.org/TR/owl-ref/#TransitiveProperty-def">owl:TransitiveProperty</ulink>].</para>
				
				<para>Note: Transitive properties and their superproperties should not be assigned a maximum cardinality restriction of one. This would contradict the fact that the resource X described above can be transitively related to both Y and Z.</para>
				
				 <para>Note: Transitive properties should not be defined as [<xref linkend="nrl:FunctionalProperty"/>] properties. If a transitive functional property relates X to Y, then X cannot be related to other resources by that same property. Thus transitivity cannot hold.</para>
					
				<para>Note: Transitive properties should not be defined as [<xref linkend="nrl:InverseFunctionalProperty"/>] properties. If a transitive inverse functional property relates X to Y, then Y cannot be related to other resources by that same property. Thus transitivity cannot hold. </para>
				
				<para><emphasis>Example</emphasis></para>
				<para> [1] voc:containsFolder is defined as an instance of rdf:Property, applicable to instances of voc:Folder and taking instances of voc:Folder as a values. voc:containsFolder is also defined to be an instance of [<xref linkend="nrl:TransitiveProperty"/>]</para>
				<para> [2] desktop:MyPapers is defined to be an instance of class voc:Folder. Another voc:Folder, desktop:PublishedPapers is related to desktop:MyPapers by the transitive property voc:containsFolder. </para>
				<para> [3] desktop:PublishedPapers is defined to be an instance of class voc:Folder. Another voc:Folder, desktop:ShortPapers is related to desktop:PublishedPapers by the transitive property voc:containsFolder. </para>
				<para> Since <emphasis>containsFolder</emphasis> is a transitive property, a reasoner can easily deduce that since <emphasis>MyPapers - containsFolder - PublishedPapers</emphasis> and <emphasis>PublishedPapers - containsFolder - ShortPapers</emphasis>, then <emphasis>MyPapers - containsFolder - ShortPapers</emphasis> as well.</para>
				
				<programlisting>
:o1 {
		...
		voc:containsFolder rdf:type rdf:Property ;
		rdf:domain voc:Folder ;
		rdf:range voc:Folder ;
		[1] rdf:type nrl:TransitiveProperty . }
		
:ib1 {
		...
		desktop:MyPapers rdf:type voc:Folder ;
		[2] 	voc:containsFolder desktop:PublishedPapers .
		[3] desktop:PublishedPapers rdf:type voc:Folder ;
				voc:containsFolder desktop:ShortPapers . }
				</programlisting>
				</listitem>
			</varlistentry>
		
			
			<varlistentry>
			<term>nrl:SymmetricProperty</term>
			<listitem>
			<para>Properties can be defined to be symmetric. If a symmetric property relates resource X to resource Y, then it follows that Y is related to X by the same property. Examples follow [<xref linkend="nrl:ReflexiveProperty"/>]. This class is similar to [<ulink url="http://www.w3.org/TR/owl-ref/#SymmetricProperty-def">owl:SymmetricProperty</ulink>].</para>
			</listitem>
		</varlistentry>
	
			<varlistentry>
			<term>nrl:AsymmetricProperty</term>
			<listitem>
			<para>Properties can also be defined to be asymmetric. Then if asymmetric property relates X to Y, then Y cannot be related to X by the same property.</para>
			</listitem>
		</varlistentry>
        
			<varlistentry>
			<term>nrl:ReflexiveProperty</term>
			<listitem>

			<para>Properties can be defined to be reflexive. This would restrict the use of this property to relate a resource to itself. Hence, reflexive properties can only relate resource X to itself.</para>
			<para><emphasis>Examples</emphasis></para>
			<para> [1] voc:relatedTopic is defined as an instance of rdf:Property, applicable to instances of voc:Folder and taking instances of voc:Folder as values.<emphasis> relatedTopic</emphasis> is defined to be an instance of [<xref linkend="nrl:SymmetricProperty"/>]. </para>
			<para> [2] voc:hasTopic is defined as an instance of rdf:Property, applicable to instances of voc:Folder and taking instances of voc:Topic as values.<emphasis> hasTopic</emphasis> is defined to be an instance of [<xref linkend="nrl:AsymmetricProperty"/>]. </para>
			<para> [3] desktop:Publications is defined to be an instance of class voc:Topic. Another voc:Topic, desktop:Research is defined to be a voc:relatedTopic of desktop:Publications.</para>
			<para> Since <emphasis>relatedTopic</emphasis> is a symmetric property, it can be inferred that <emphasis>Publications</emphasis> is a <emphasis>relatedTopic</emphasis> of <emphasis>Research</emphasis>. </para>
			<para> [4] desktop:PublishedPapers is defined to be an instance of class voc:Folder. desktop:PublishedPapers is also stated to have topic desktop:Publications.  Since <emphasis>hasTopic</emphasis> is an asymmetric property, a reasoner would know that it is not possible to say that the<emphasis/>topic <emphasis>Publications</emphasis> has as topic the<emphasis/>folder<emphasis> PublishedPapers</emphasis>.</para>

			<programlisting>
:o1 {
		..
		voc:relatedTopic rdf:type rdf:Property ;
			rdf:domain voc:Topic ;
			rdf:range voc:Topic ; 
		[1] rdf:type nrl:SymmetricProperty . 
		voc:hasTopic rdf:type rdf:Property ;
			rdf:domain voc:Folder ;
			rdf:range voc:Topic ; 
		[2] rdf:type nrl:AsymmetricProperty . }
:ib1 { 
		...
		[3] desktop:Publications rdf:type voc:Topic ; 
			voc:relatedTopic desktop:Research .
		[4] desktop:PublishedPapers rdf:type voc:Folder ;
		voc:hasTopic desktop:Publications . }
			</programlisting>
			</listitem>
		</varlistentry>
	
			<varlistentry>
			<term>nrl:FunctionalProperty</term>
			<listitem>
			<para>Properties can be defined to be functional. This translates into the property having a minimum cardinality of zero and a maximum cardinality of one for each unique resource that is applied as its domain. Therefore, if a functional property relates resource X to resource Y, then it means that X cannot be forward related to other resources by that same property. In simpler words, the value of such a property for resource X, if stated, is unique. Example follows [<xref linkend="nrl:InverseFunctionalProperty"/>]. This class is similar to [<ulink url="http://www.w3.org/TR/owl-ref/#FunctionalProperty-def">owl:FunctionalProperty</ulink>].</para>
			</listitem>
		</varlistentry>
	
			<varlistentry>
			<term>nrl:InverseFunctionalProperty</term>
			<listitem>
			<para>A property can also be defined to be inverse functional. Such a property implies that the inverse of the property is functional. This does not automatically mean that an inverse property of the property in question is actually defined using [<xref linkend="nrl:inverseProperty"/>]. This translates into the property having a minimum cardinality of zero and a maximum cardinality of one for each unique resource that is applied as its range. Therefore, if such a property relates resource X to resource Y, then it means that Y cannot be backward related to other resources using that same property. In other words, if Y is defined as the property value for one resource, then it cannot be defined as the property value for another resource. This class is similar to [<ulink url="http://www.w3.org/TR/owl-ref/#InverseFunctionalProperty-def">owl:InverseFunctionalProperty</ulink>].</para>
			<para><emphasis>Examples</emphasis></para>
			<para> [1] voc:user is defined as an instance of rdf:Property, applicable to instances of voc:Desktop and taking instances of voc:Person as a values. desktop:user is defined to be an instance of [<xref linkend="nrl:FunctionalProperty"/>].</para>
			<para> [2] voc:email is defined as an instance of rdf:Property, applicable to instances of voc:Person and taking string datatypes as values. voc:email is defined to be an instance of [<xref linkend="nrl:InverseFunctionalProperty"/>.</para>
			<para> [3] desktop:MyPersonalDesktop is defined to be an instance of class voc:Desktop. It is related to <emphasis>Person</emphasis> desktop:MyUserName by the property voc:user.  Since <emphasis>user</emphasis> is a functional property, it can be concluded that this instance of <emphasis>Desktop</emphasis> has only that unique particular instance of <emphasis>Person</emphasis> as <emphasis>user</emphasis>. No other instances of <emphasis>Person</emphasis> can be defined as the <emphasis>user</emphasis> of this <emphasis>Desktop</emphasis>. Under the closed-world assumption this would generate warning over conflicting data. </para>
			<para> [4] desktop:MyUserName is defined to be an instance of class voc:Person with a voc:email value of <emphasis>user.name@host.com.</emphasis> Since <emphasis>email</emphasis> is an  inverse functional property, it follows that  <emphasis>user.name@host.com </emphasis>cannot belong to other instances of <emphasis>Person</emphasis>. Doing so might result in conflicting data due to NRL&apos;s closed-world assumption.</para>
			
			<programlisting>
:o1 {
		...
		voc:user rdf:type rdf:Property ;
			rdf:domain voc:Desktop ;
			rdf:range voc:Person ;
		[1] rdf:type nrl:FunctionalProperty . 
		voc:email rdf:type rdf:Property ;
			rdf:domain voc:Person ;
			rdf:range &lt;http://www.w3.org/2001/XMLSchema#string&gt; ;
		[2] rdf:type nrl:InverseFunctionalProperty . }
:ib1 {
		...
		[3] desktop:MyPersonalDesktop rdf:type voc:Desktop ;
				voc:user desktop:MyUsername .
		[4] desktop:MyUserName rdf:type voc:Person ;
				voc:email &quot;user.name@host.com&quot; . }			
			</programlisting>
			</listitem>
		</varlistentry>
	
			<varlistentry>
			<term>nrl:cardinality</term>
			<listitem>
			<para> This property is a cardinality restriction property. It can be applied to instances of rdf:Property to specify a constraint on the number n of values that the property can have for each unique resource that is applied as its domain. The value allowed for this property is a nonNegativeInteger data value from the XML Schema datatypes. This states that instances of the restricted property must have exactly n semantically distinct values. In order to correctly use the NRL vocabulary, this restriction must be always strictly respected. This property is similar to [<ulink url="http://www.w3.org/TR/owl-ref/#cardinality-def">owl:cardinality</ulink>].</para>
			</listitem>
		</varlistentry>
	
			<varlistentry>
			<term>nrl:minCardinality</term>
			<listitem> 
			<para>This property is a cardinality restriction property. It can be applied to instances of rdf:Property to specify a constraint on the minimum number n of values that the property can have for each unique resource it is applied as its domain. The value allowed for this property is a nonNegativeInteger data value from the XML Schema datatypes. This states that instances of the restricted property must have at least n (n or more) semantically distinct values. In particular, properties with a minimum cardinality of one must have at least one value to be semantically valid. Properties whose minimum cardinality constraint is not defined have a default minimum cardinality of zero. In order to correctly use the NRL vocabulary, this restriction must be always strictly respected. This property is similar to the Protégé minimum cardinality property constraints and to [<ulink url="http://www.w3.org/TR/owl-ref/#minCardinality-def">owl:minCardinality</ulink>].</para>
			</listitem>
		</varlistentry>
		
			<varlistentry>
			<term>nrl:maxCardinality</term>
			<listitem>
			  <para>This property is a cardinality restriction property. It can be applied to instances of rdf:Property to specify a constraint on the maximum number n of values that the property can have for each unique resource it is applied as its domain. The value allowed for this property is a nonNegativeInteger data value from the XML Schema datatypes. This states that instances of the restricted property must have at most n (n or less) semantically distinct values. In particular, a property with a maximum cardinality of zero would be of no use since it should never contain any values. Properties whose maximum cardinality constraint is not defined have a default infinite maximum cardinality. In order to correctly use the NRL vocabulary, this restriction must be always strictly respected. This property is similar to the Protégé maximum cardinality property constraints and to [<ulink url="http://www.w3.org/TR/owl-ref/#maxCardinality-def">owl:maxCardinality</ulink>].</para>
			  <para>Examples</para>
			  <para> The property desktop:contactEmail is defined as being applicable to voc:ContactPerson and to have a value of voc:EmailAddress. Furthermore a restriction is placed on the minimum cardinality of the values for this property [1]. The minimum number of values for this property is one. This means, that all <emphasis>ContactPerson</emphasis> instances must be assigned at least one <emphasis>EmailAddress</emphasis>.</para>
			  
			<programlisting>
:o1 {
		...
		voc:contactEmail rdf:type rdf:Property ;
			rdf:domain voc:ContactPerson ;
			rdf:range voc:EmailAddress ;
			[1] nrl:minCardinality &quot;1&quot; . }
			</programlisting>
				
			<para> This second example demonstrates the combinatorial use of cardinality constraints on properties. The property voc:firstName is defined as being applicable to voc:ContactPerson and to have a string datatype value. Two restrictions are placed on the minimum [2] and maximum [3] cardinality of the values for this property [2]. The value for both restrictions is set to one. This means, that all <emphasis>ContactPerson</emphasis> instances must be assigned exactly one <emphasis>firstName</emphasis>.</para>
				<programlisting>  
:o1 {
		...
		voc:firstName rdf:type rdf:Property ;
			rdf:domain voc:ContactPerson ;
			rdf:range &lt;http://www.w3.org/2001/XMLSchema#string&gt; ; 
		[2] nrl:minCardinality &quot;1&quot; ;
		[3] nrl:maxCardinality &quot;1&quot; . }
				</programlisting> 
			</listitem>
		</varlistentry>
		
			<varlistentry>
			<term>nrl:inverseProperty</term>
			<listitem> 
		  
			<para>Properties are mainly distinguished by their domain and range. Some properties are the exact inverse of each others, where the range and domain of property A are the domain and range of property B respectively. In order to provide efficient reasoning and query handling, the NRL requires that such inverse functionality of two properties is explicitly stated using the [<xref linkend="nrl:inverseProperty"/>]. Stating that a new property B is the inverse property of predefined property A is equivalent to stating that the range of A is the domain of B and the domain of A is the range of B. This will help enable the logical inference of some implicit statements from other explicit statements. If property A and property B are defined to be inverse properties, stating that resource X is related by property A to resource Y will evoke the statement that resource Y is related by property B to resource X. This property is comparable to Protégé’s inverse property and [<ulink url="http://www.w3.org/TR/owl-ref/#inverseOf-def">owl:inverseOf</ulink>].</para>
			<para><emphasis>Example</emphasis></para>
			<para> [1] voc:hasFile is defined as an instance of rdf:Property, applicable to instances of voc:Folder and taking instances of voc:File as a values.</para>
			<para> [3] voc:inFolder is likewise defined as an instance of rdf:Property, applicable to instances of voc:File and taking instances of voc:Folder as values. The domain of voc:hasFile is equivalent to the range of voc:inFolder, while the range of voc:hasFile is equivalent to the domain of voc:inFolder.</para>
			<para> [2,4] This implicit inverse relationship is explicitly stated in both properties.</para>
			<programlisting>
:o1 {
		...
	[1] voc:hasFile rdf:type rdf:Property ;
			rdf:domain voc:Folder ;
			rdf:range voc:File ;
		[2] nrl:inverseProperty voc:inFolder .
	[3] voc:inFolder rdf:type rdf:Property ;
			rdf:domain voc:File ;
			rdf:range voc:Folder ; 
		[4] nrl:inverseProperty voc:hasFile . }
			</programlisting>
			</listitem>
		</varlistentry>
	
		</variablelist>

	</section>
</section>	
<section id="nrl:sec-handling-multiple-models-nrl-named-graph-extensions" xmlns="http://docbook.org/ns/docbook">
		<title>Handling Multiple Models: NRL Named Graph Extensions</title>
		
		<para>In the Social Semantic Desktop domain we take a Named Graphs approach to semantic data. Named Graphs [NGs] are an extension on top of RDF, where every RDF Graph as defined in [<xref linkend="nrl:sec-references"/>] is identified by a name. NGs provide useful additional functionality on top of RDF, particulary with respect to metametadata (data about metadata), provenance and data (in)equivalence issues. This approach is based on the workdescribed in [<link linkend="nrl:sec-references">NAMED GRAPHS</link>] excluding the open-world assumption described there. However, one should note that our definitions for a closed-world and open-world assumption (See Section <xref linkend="nrl:sec-nrl-and-closed-world-vs-open-world-assumptions"/>) differ slightly from the ones given in [<link linkend="nrl:sec-references">NAMED GRAPHS</link>]. As previously stated NRL does not assume an open-world scenario and although it imposes no semantics per se to the graphs the NRL Semantics are based on a closed-world assumption.</para>
		
        <para>A named graph is a pair (n,g), where n is a unique URI reference denoting the assigned name for the graph g. Such a mappingfixes the graph g corresponding to n in a rigid, non-extensible way. The URI representing n can then be used from any location to refer to the corresponding set of triples belonging to the graph g. In other words, graph names, like namespaces, should be globally unique. A graph g&apos; consistent with a different graph g named n cannot be assigned the same name n. Two different datasets asserting graphs g and g&apos; having the same URI for a name contradict one another. </para>
		
        <para>An RDF triple can exist in a named graph or outside any named graph. However, for consistency reasons, all triples must be assigned to some named graph. For this reason, NRL provides the special named graph [<xref linkend="nrl:DefaultGraph"/>]. Triples existing outside any named graph automatically form part of this default graph. This ensures backward compatibility with triples that are not based on named graphs. This approach gives rise to the term RDF Dataset as defined in [<link linkend="nrl:sec-references">SPARQL-QUERY</link>]. An RDF dataset is composed of a default graph and an unlimited number of distinct named graphs. It is formally defined as the set {g, (n<subscript>1</subscript>, g<subscript>1</subscript>), (n<subscript>2</subscript>, g<subscript>2</subscript>), . . ., (n<subscript>n</subscript>, g<subscript>n</subscript>) } comprising of the default graph g and zero or more named graphs (n,g).</para>
		
        <para>NRL distinguishes between Graphs and Graph Roles, in order to have orthogonal modeling primitives for defining graphs and for specifying their role. A graph role refers to the characteristics and content of a named graph (e.g. simple data, an ontology, a knowledge base, etc.) and how the data is intented to be handled.  The NEPOMUK Annotation Ontology (Refer to the <ulink url="http://www.semanticdesktop.org/ontologies/nao">NAO</ulink>) includes vocabulary for providing metadata about graph roles. Graph metadata will be attached to these roles rather than to the graphs themselves, because in practice it makes more sense to describe an ontology or a knowledge base rather than an anonymous graph. Roles are more stable than the graphs they represent, and while the graph for a particular role might change constantly, evolution of the role itself is less frequent. An instantiation of a role represents a specific type of graph and the corresponding triple set data. One can contain graph metadata outside or inside the graph being described. Storing graph metadata within the graph itself implies that the graph metadata is also describing itself, which is not something one will always want to have. Therefore its more suitable to keep graph metadata separate from its respective graph, and therefore outside the graph. This means to either contain the metadata in the default graph, or in a dedicated named graph. Since having graph metadata about every existing named graph in the default graph is not practical, it is more suitable to have the graph metadata in separate named graphs. That is, any metadata about a named graph g will be contained within a separate metadata graph gm dedicated for g. A special graph role, [<xref linkend="nrl:GraphMetadata"/>] is used to mark such metadata graphs.</para>
		
        <para> General graph vocabulary is defined in [<xref linkend="nrl:sec-graph-core-vocabulary"/>] while [<xref linkend="nrl:sec-graph-roles-vocabulary"/>] is dedicated entirely to graph roles. <xref linkend="nrl:fig-named-graphs"/> depicts the class hierearchy supporting NGs in NRL. Graph Roles(yellow) are defined as a subclass of the abstract role superclass nrl:Data, itself being defined as a subclass of the general Graph representation (red). A special Graph specialization (blue) is used as a marker class for Graphs that are represented and identified by a document URL [See <xref linkend="nrl:DocumentGraph"/>].</para>
          
		<figure id="nrl:fig-named-graphs" xreflabel="Figure 3">
		<mediaobject>
		  <imageobject role="html">
			<imagedata fileref="nrl-named-graphs.png" scalefit="1"/>
		  </imageobject>
		  <caption>Figure 3: NRL Named Graph class hierarchy</caption>
		</mediaobject>
		</figure>

		<section id="nrl:sec-graph-core-vocabulary">
			<title>Graph Core Vocabulary</title>
			<para>This section specifies the core named graph vocabulary. This consists of top-level named graph elements which represent general graphs. Vocabulary for representation of specific graph roles is described in section [<xref linkend="nrl:sec-graph-roles-vocabulary"/>].</para>
			
			<variablelist>
			<varlistentry>
				<term>nrl:Graph</term>
				<listitem>
				<para>This class represents a named graph. An instance of this class will represent a named graph as described in the introduction of this section, where the name of the instance coincides with the name of the graph. It should be noted that all graph role classes described in [<xref linkend="nrl:sec-graph-roles-vocabulary"/>] are subclasses of this element [See <xref linkend="nrl:fig-named-graphs"/>]. As such, there will generally be instances of specific graph roles rather than this more generic graph representation. This class is similar to [<ulink url="http://www.w3.org/2004/03/trix/">rdfg:Graph</ulink>].</para>
				</listitem>
			</varlistentry>
			
			<varlistentry>
			  <term>nrl:DocumentGraph</term><listitem>
			  <para>This is a marker class that names graphs via the URL of their containing document. A graph that is completely represented by such a document can be defined to be an instance of this class, whereby the document URL will become the name of that graph. </para>
			</listitem></varlistentry>
			
			<varlistentry>
				<term>nrl:subGraphOf</term><listitem>
				<para>Graphs can consist of subparts of other more general Graphs. In other terms, a set of triples may form a specific part of a more general set of triples. This property can be used to model such a relationship between two instances of [<xref linkend="nrl:Graph"/>]. This property is the inverse of [<xref linkend="nrl:superGraphOf"/>]. When a graph g is defined to be a subgraph of another graph g&apos;, the latter is understood to be the supergraph of g. This property is similar to [<ulink url="http://www.w3.org/2004/03/trix/">rdfg:subGraphOf</ulink>]. </para>
			</listitem></varlistentry>
			<varlistentry>
				<term>nrl:superGraphOf</term><listitem>
				<para>This property can be used to state that one graph subsumes another graph. A supergraph will then consist of one or more subgraphs. This property is the inverse of [<xref linkend="nrl:subGraphOf"/>]. When a graph g&apos; is defined to be a supergraph of another graph g, the latter is understood to be a supgraph of g&apos;. The property [<xref linkend="nrl:imports"/>] is a subproperty of this property.</para>
			</listitem></varlistentry>
			<varlistentry>
				  <term>nrl:equivalentGraph</term><listitem>
				  <para>A set of triples can undergo duplication at a number of separate locations. This property can effectively be used to state that a graph that manifests itself at more than one location under different names is in fact equivalent. Equivalent graphs are simultaneously the subgraph and supergraph of each other. This property is similar to [<ulink url="http://www.w3.org/2004/03/trix/">rdfg:equivalentGraph</ulink>].</para>
				  <para><emphasis>Note:</emphasis> The term equivalentGraph is subject to the role of the graphs being related. Hence for two graphs to be defined equivalent, they must either have the same role, or be a superrole or subrole of each other as depicted in <xref linkend="nrl:fig-named-graphs"/>. When a graph g having a role R is defined to be equivalent to a graph g&apos; having a superrole R&apos;, then g&apos; is understood to have the more specific role R. For example, if graph g having role [<xref linkend="nrl:Ontology"/>] is defined as equivalent to graph g&apos; having role [<xref linkend="nrl:Schema"/>], then it can be said that graph g&apos;has a role of [<xref linkend="nrl:Ontology"/>]. However not all graphs can be defined to be equivalent.  For example, graph g<subscript>1</subscript>having role [<xref linkend="nrl:InstanceBase"/>] cannot be defined as equivalent to graph g<subscript>2</subscript>  if this graph has the role [<xref linkend="nrl:Schema"/>].</para>
			</listitem></varlistentry>	  
			
			<varlistentry>
				<term>nrl:imports</term><listitem>
				<para>This special subproperty of [<xref linkend="nrl:superGraphOf"/>] models graph imports and can be used to state that an existing named graph g&apos; should be considered as part of graph g. This is akin to saying that g&apos; is a subgraph of g or inversely that g is a supergraph of g&apos;. This property can be used to model graph role data imports. Importing a graph into another means that all the former graph’s data, and semantics, will implicitly form part of the latter. Such modelling is transitive. If graph g is imported into graph g&apos;, and g&apos; is imported into graph g&apos;&apos;, then g&apos;&apos; also includes the data represented byg. Two graphs g and g&apos; are equivalent if they import each other. When applied to the [<xref linkend="nrl:Ontology"/>] role this property can be used to model ontology imports and in this case this property is similar to [<ulink url="http://www.w3.org/TR/owl-ref/#imports-def">owl:imports</ulink>]. An incompatibility problem may arise when importing graphs with incompatible semantics to the current graph, or combining multiple graphs with different semantics into a new supergraph.. This incompatibility may however be resolved via semantic views which rectify this problem by aligning the different semantics of the graphs.</para>
			</listitem></varlistentry>
        
			<varlistentry id="nrl:DefaultGraph">
			  <term>nrl:DefaultGraph</term><listitem>
			  <para>Although triples can exist inside a named graph or outside any named graph, for consistency reasons all triples are required to form part of some named graph. This default graph instance is provided by NRL to serve this requirement. All triples existing outside any named graph (e.g. external triples unaware of NRL&apos;s named graph approach), will be assigned to this default graph. The DefaultGraph is disjoint from all other existing named graphs and it is given by the intersection of the complements of all other existing named graphs in the RDF triple space.</para>
			</listitem></varlistentry>
     
			</variablelist>
			
 </section>
	  
      <section id="nrl:sec-graph-roles-vocabulary">
		<title>Graph Roles Vocabulary</title>
		<para>This section introduces classes and properties provided in NRL that deal with Graph Roles as described in the introduction of <xref linkend="nrl:sec-handling-multiple-models-nrl-named-graph-extensions"/> and depicted in <xref linkend="nrl:fig-named-graphs"/>. This vocabulary is closely tied with the Graph Metadata Vocabulary provided in [<ulink url="http://www.semanticdesktop.org/ontologies/nao">NAO</ulink>]. In fact they can also be considered as graph metadata vocabulary, since the elements are in practice used within graph metadata definitions. However, due to their essential nature they are core NRL elements.</para>
		
		<variablelist>
		        <varlistentry>
          <term>nrl:Data</term>
		  <listitem>
          <para>This is an abstract class representing all graph roles. All graphs are assigned one of the roles represented by this abstract superclass. It is itself a subclass of [<xref linkend="nrl:Graph"/>] alongside [<xref linkend="nrl:GraphView"/>] and [<xref linkend="nrl:DocumentGraph"/>].</para>
        </listitem>
		</varlistentry>
		
        <varlistentry>
          <term>nrl:Schema</term><listitem>
          <para>A schema represents a conceptualisation model. This class is used as a role for a graph that represents data in the form of a schema. It is defined as a subclass of [<xref linkend="nrl:Data"/>], and therefore also a subclass of [<xref linkend="nrl:Graph"/>]; and it is a superclass of [<xref linkend="nrl:Ontology"/>].</para>
        </listitem></varlistentry>
		
        <varlistentry>
          <term>nrl:InstanceBase</term><listitem>
          <para>A graph may represent  instances of classes defined using some schema (or ontology) that is represented by another separate graph. This class provides the representation for such graphs. An instance base is a subclass of [<xref linkend="nrl:Data"/>], and therefore also a subclass of [<xref linkend="nrl:Graph"/>].</para>
        </listitem></varlistentry>
		
        <varlistentry>
          <term>nrl:Ontology</term><listitem>
          <para>An ontology is a more expressive type of schema describing more complex models which may include rule-based knowledge in addition to a relational characterisation. This class represents such a role for a Graph and it can also serve the purpose of an ontology header within RDF/S documents as provided by [<ulink url="http://www.w3.org/TR/owl-ref/#Ontology-def">owl:Ontology</ulink>]. This class is a subclass of [<xref linkend="nrl:Schema"/>] and therefore also a subclass of [<xref linkend="nrl:Data"/>] and [<xref linkend="nrl:Graph"/>].</para>
        </listitem></varlistentry>
		
        <varlistentry>
          <term>nrl:KnowledgeBase</term><listitem>
          <para>A graph can represent a schema (or ontology) together with a number of instantiations of elements in the same schema (or ontology). Such a graph has a similar role to an instance base with the major difference that it also represents the schema (or ontology) providing the constructs used to define the instances. Therefore this role can be seen as a subset of the intersection of the [<xref linkend="nrl:Ontology"/>] and [<xref linkend="nrl:InstanceBase"/>] roles, and is in fact defined as a subclass of both these roles. </para>
        </listitem></varlistentry>
		
        <varlistentry>
          <term>nrl:Configuration</term><listitem>
          <para>Technical configuration data that is irrelevant to general semantic web data can also be represented within a graph, through this role. Other additional roles serving different purposes might be added in the future. This class is a subclass of [<xref linkend="nrl:Data"/>]. </para>
        </listitem></varlistentry>
		
        <varlistentry>
          <term>nrl:GraphMetadata</term><listitem>
          <para>This role is useful to mark graphs whose sole purpose is to store metadata about some specific graph. Data about a graph, or Graph Metadata, is thus stored in a corresponding  graph that has this role. </para>
        </listitem></varlistentry>
		
        <varlistentry>
          <term>nrl:graphMetadataFor</term><listitem>
          <para>This property binds a metadata graph to the graph being described. A metadata graph must point to the named graph being described therefore the minimum cardinality is set to 1. Given that in some cases a single metadata graph can provide metadata for multiple graphs, the maximum cardinality is undefined. </para>
        </listitem></varlistentry>
		
        <varlistentry>
          <term>nrl:coreGraphMetadataFor</term><listitem>
          <para>Although a graph can have multiple metadata graphs that describe it, there can only be one unique core metadata graph which defines the graph&apos;s important core properties, e.g. whether it is updatable or otherwise and other important metadata vocabulary. This property identifies such a core metadata graph and points to the graph it describes. It is a subproperty of <xref linkend="nrl:graphMetadataFor"/>.</para>
          <para>Note: Sometimes the inverse link (from the subject named graph to its core metadata graph) might be of practical use. However, in order to avoid redundancy in the language, this direction has not been included in NRL. For a more efficient access to a graph&apos;s metadata, specific applications might want to establish this direction when loading graphs.</para>
        </listitem></varlistentry>
		
        <varlistentry>
          <term>nrl:Semantics</term><listitem>
          <para>The declarative semantics for a graph role can be specified by referring to instances of this class. Such an instance will consist of an identifier to a location where the formal semantics of the schema or language used are specified.</para>
        </listitem></varlistentry>
		
        <varlistentry>
          <term>nrl:hasSemantics</term><listitem>
          <para>Graph roles do not automatically have any semantics, but these can be specified through this property (declarative semantics) with respect to an instance of the special class [<xref linkend="nrl:Semantics"/>]. The semantics of a graph role can also be realized (procedural semantics) by instantiating a graph view with a semantic specification over the role (See <xref linkend="nrl:sec-imposing-semantics-on-and-tailoring-of-graphs-nrl-graph-views-extensions"/> and <xref linkend="nrl:realizes"/>). However this property has a declarative rather than a procedural role.</para>
          <para>Note:A graph role with (virtual) declarative semantics should never be assumed to also carry (realized) procedural semantics. </para>
         </listitem></varlistentry>
		 
        <varlistentry>
          <term>nrl:semanticsDefinedBy</term><listitem>
          <para>This property links instances of the [<xref linkend="nrl:Semantics"/>] class to a URL for a document that defines the formal, non-machine-readable semantics that the instance is representing.</para>
        </listitem></varlistentry>
		
        <varlistentry>
          <term>nrl:semanticsLabel</term><listitem>
          <para>This trivial property assigns a string label to instances of the [<xref linkend="nrl:Semantics"/>] class, in order to more easily identify and refer to different semantics.</para>
        </listitem></varlistentry>
		
        <varlistentry>
          <term>nrl:updatable</term><listitem>
          <para>A graph role is stated as being updatable (1) or static (0). A static graph prevents any modifications - any modified versions of the graph must be created as a separate graph. A non-static graph&apos;s dataset can be directly modified.</para>
        </listitem></varlistentry>
    
		</variablelist>
		
  </section>
	  
    <section id="nrl:sec-named-graph-example">
        <title>Named Graph Example</title>
        <para>The following example demonstrates the use of NG extensions and is based on <ulink url="http://www.wiwiss.fu-berlin.de/suhl/bizer/TriG/">TriG</ulink> [TRIG] as introduced in the introduction of this document. A simple graph in TriG named G (where g is a URI) is syntactically denoted by: </para>
		
        <informaltable frame="all">
          <tgroup cols="1">
            <colspec colname="c1" colwidth="100*"/>
            <tbody>
              <row>
                <entry><para>:G {Triple Set}</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
		
        <para>This example and the one that follows in [<xref linkend="nrl:sec-graph-views-example"/>] model the dataflow represented in <xref linkend="nrl:fig-nrl-dataflow"/>. This example demonstrates how one can make use of the named graph paradigm and the syntax for named graphs presented in this section. </para>
		
        <para>[1] The example starts by defining the required namespaces.</para>
        <para> [2-7] Metadata about six different graphs is represented within four metadata graphs. </para>
        <para> [3] The metadata graph describing graph ex:o1 given in [8] states that ex:o1 is an ontology (graph with role ontology). [4] ex:o1 is defined to have the declarative semantics defined by the instance RDFS.</para>
        <para> [5] RDFS is an instance of nrl:Semantics. It is labelled &apos;RDF/S&apos; and its semantics are said to be defined by &apos;http://www.w3.org/TR/rdf-schema#&apos;.</para>
        <para>[6] ex:o1_metadata itself is marked as being graph metadata.</para>
        <para> [7] ex:o2_metadata says that ex:o2 is graph equivalent to http://www.domain.com/o2.rdfs. </para>
        <para> [8] ex:o2_metadata states also that ex:o is an ontology represented by the union of graphs ex:o1 and ex:o2. ex:o is now a supergraph of ex:o1 and ex:o2 (or http://www.domain.com/o2.rdfs). Inversely the named graphs are subgraphs of ex:o.</para>
        <para> [9] ex:ib1_metadata states that ex:ib1 is an instance base defined in [9].</para>
        <para> [10] ex:kb1_metadata states that ex:kb1 is a knowledge base graph represented by the union of graphs ex:o, ex:ib1 andhttp://www.anotherdomain.com/ib2.rdfs. Alternatively, through the definition of ex:o [5], one can say that ex:kb1 is represented by the union of graphs ex:o1, ex:o2 (orhttp://www.domain.com/o2.rdfs), ex:ib1 and http://www.anotherdomain.com/ib2.rdfs, where the latter graphs are all subgraphs of ex:kb1.</para>
        <para>[12] The representation for graph ex:o1 (an ontology) is composed of the definition of a class ex:Person, a class ex:DesktopUser which is also a subclass of ex:Person, and a symmetric property ex:knows which relates instances of ex:Person to other instansces of ex:Person.</para>
        <para> [12] The representation for graph ex:ib1 (an instance base) is composed of the definition of an instance of ex:DesktopUser called ex:User1, and two instances of ex:Person called ex:Contact1 and ex:Contact2. ex:Contact1 &apos;knows&apos; ex:Contact2 and ex:User1 while ex:Contact2 &apos;knows&apos; ex:User1. However since ex:knows is a symmetric property, all three instances of ex:Person (or its subclass ex:DesktopUser) &apos;know&apos; each other.</para>
		
        <programlisting>
[1]  @prefix nrl: &lt;http://www.semanticdesktop.org/ontology/yyyy/mm/dd/nrl#&gt; .
	 @prefix ex: &lt;http://www.example.org/vocabulary#&gt; .
	 
[2]  ex:o1_metadata {
		[3] ex:o1 a nrl:Ontology ;
		[4] nrl:hasSemantics ex:RDFS .
		[5] ex:RDFS a nrl:Semantics ;
				nrl:semanticsDefinedBy &quot;http://www.w3.org/TR/rdf-schema#&quot; ;
				nrl:semanticsLabel &quot;RDF/S&quot; . 
		[6] ex:o1_metadata rdf:type nrl:GraphMetadata . }

	 ex:o2_metadata {
		[7] ex:o2 rdf:type nrl:Ontology ;
			nrl:equivalentGraph &lt;http://www.domain.com/o2.rdfs&gt; .
			[8] ex:o rdf:type nrl:Ontology ;
			nrl:imports ex:o1 ,
						ex:o2 . 
			ex:o2_metadata rdf:type nrl:GraphMetadata . }
	 
[9]  ex:ib1_metdata {
			ex:ib1 rdf:type nrl:InstanceBase .
			ex:ib1_metadata rdf:type nrl:GraphMetadata . }

[10] ex:kb1_metadata {
			ex:kb1 rdf:type nrl:KnowledgeBase ;
			nrl:imports ex:o ,
						ex:ib1 ,
						&lt;http://www.anotherdomain.com/ib2.rdfs&gt; .
			ex:kb1_metadata rdf:type nrl:GraphMetadata . }

[11] ex:o1 {
			ex:Person rdf:type rdfs:Class .
			ex:DesktopUser rdf:type rdfs:Class ;
				rdfs:subClassOf ex:Person .
			ex:knows rdf:type rdf:Property ,
							  nrl:SymmetricProperty ;
				rdfs:domain ex:Person ;
				rdfs:range ex:Person . }

[12] ex:ib1 {
			ex:User1 rdf:type ex:DesktopUser .
			ex:Contact1 rdf:type ex:Person ;
				ex:knows ex:User1 ,
						 ex:Contact1 .
				ex:Contact2 rdf:type ex:Person ;
					ex:knows ex:User1 . }
		</programlisting>
        <para> The RDF/S Ontology accesible at http://www.domain.com/o2.rdfs and serialized as RDF/XML is given and described as follows.</para>
        <para> [1] Required namespaces are defined.</para>
        <para> [2] The [<xref linkend="nrl:Ontology"/>] class can be used to define some (ontology) graph metadata about the graph represented by this RDF/S document. Here it states that this is a document graph having the role of an ontology. </para>
        <para>Note: Although this is allowed it is not considered best practice, since in this way, given that we state that XML/RDFS files can only encode one graph at a time, one is effectively providing graph metadata within the graph itself. This goes against our notion of keeping metadata about a graph separate from the graph itself, as discussed in [<xref linkend="nrl:sec-handling-multiple-models-nrl-named-graph-extensions"/>].</para>
        <para> [3] A class Desktop is defined.</para>
        <para> [4] A property user is defined as relating instances of Desktop to instances of http://www.example.org/vocabulary#DesktopUser defined in ex:g1 in the example above.</para>
        <programlisting>
[1] &lt;rdf:RDF
		xmlns:rdf=&quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#&quot;
		xmlns:rdfs=&quot;http://www.w3.org/2000/01/rdf-schema#&quot;
		xmlns:nrl=&quot;http://www.semanticdesktop.org/ontology/yyyy/mm/dd/nrl#&quot;&gt;
		xmlns=&quot;http://www.domain.com/o2#&quot;&gt;
		
		[2] &lt;nrl:Ontology rdf:about=&quot;&quot;&gt;
			&lt;rdf:type rdfs:resource=&quot;nrl#DocumentGraph&quot;/&gt;
			&lt;!--Other Graph Metadata---&gt;
			&lt;/nrl:Ontology&gt;
			
		[3] &lt;rdfs:Class rdf:ID=&quot;Desktop&quot;/&gt;
		[4] &lt;rdf:Property rdf:ID=&quot;user&quot;&gt;
			&lt;rdfs:domain rdf:resource=&quot;#Desktop&quot;/&gt;
			&lt;rdfs:range rdf:resource=&quot;http://www.example.org/vocabulary#DesktopUser/&gt;
			&lt;/rdf:Property&gt;
    &lt;/rdf:RDF&gt;
		</programlisting>
        <para> The following is the RDF/S instance base serialized as RDF/XML and accessible at http://www.anotherdomain.com/ib2.rdfs:</para>
        <para>[1] Required namespaces are defined.</para>
        <para> [2] Metadata about the instance base graph represented by this RDF/S document is defined through the use of [<xref linkend="nrl:InstanceBase"/>].</para>
        <para>Note: Although this is allowed it is not considered best practice, since in this way, given that we state that XML/RDFS files can only encode one graph at a time, one is effectively providing graph metadata within the graph itself. This goes against our notion of keeping metadata about a graph separate from the graph itself, as discussed in [<xref linkend="nrl:sec-handling-multiple-models-nrl-named-graph-extensions"/>].</para>
        <para>[3] DesktopA is defined as an instance of o2:Desktop and related to http://www.example.org/vocabulary#User1 through the o2:user property. </para>
        <programlisting>
[1] &lt;rdf:RDF
		xmlns:rdf=&quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#&quot;
		xmlns:rdfs=&quot;http://www.w3.org/2000/01/rdf-schema#&quot;
		xmlns:nrl=&quot;http://www.semanticdesktop.org/ontology/yyyy/mm/dd/nrl#&quot;
		xmlns:o2=&quot;http://www.domain.com/o2#&quot;
		xmlns=&quot;http://www.anotherdomain.com/ib2#&quot;&gt;
		
		[2] &lt;nrl:InstanceBase rdf:about=&quot;&quot;&gt;
			&lt;rdf:type rdfs:resource=&quot;nrl#DocumentGraph&quot;/&gt;
			&lt;!--Other Graph Metadata---&gt;
			&lt;/nrl:InstanceBase&gt;
			
		[3] &lt;o2:Desktop rdf:ID=&quot;DesktopA&quot;&gt;
				&lt;o2:user http://www.example.org/vocabulary#User1&gt;
				&lt;/o2:Desktop&gt;
    &lt;/rdf:RDF&gt;
		</programlisting>
	</section>
	
	<section id="nrl:sec-imposing-semantics-on-and-tailoring-of-graphs-nrl-graph-views-extensions">
        <title>Imposing Semantics on and Tailoring of Graphs: NRL Graph Views Extensions </title>
		<para>A simple named graph consists only of the enumerated triples in the triple set associated with the name, and it does not inherently carry any form of semantics. However in many situations it is desirable to work with an extended or restricted interpretation of a simple syntax-only named graph. These interpretations can be realized by applying rules which enhance named graphs with entailment triples, or return a restricted form of the complete triple set. To preserve the integrity of a named graph, interpretations of a basic named graph should never replace the original. To model this functionality in an intuitive way, while still separating between an original named graph and any number of its interpretations, we introduce the concept of Graph Views.</para>
		
        <para>Graph views, or simply views, are different interpretations for a particular named graph. Formally, a graph view is an executable specification of an input graph into a corresponding output graph. Informally, they can be seen as arbitrary wrappings for a named graph. <xref linkend="nrl:fig-nrl-graph-views"/> depicts graph view support in NRL. As can be seen in the figure, views are themselves named graphs (subclass of <xref linkend="nrl:Graph"/>). Therefore it is possible to have a named graph that is itself a different interpretation, or view, of another named graph. This modelling can be applied recurrently, yielding a view of a view (or an interpretation of a named graph interpretation, as depicted in <xref linkend="nrl:fig-nrl-dataflow"/>) and so on.</para>
		
        <figure id="nrl:fig-nrl-graph-views" xreflabel="Figure 4">
          <mediaobject>
            <imageobject role="html">
              <imagedata fileref="nrl-graph-views.png" scalefit="1"/>
            </imageobject>
			<caption>Figure 4: Graph Views in NRL</caption>
          </mediaobject>
        </figure>

        <para> Views are defined through View Specifications which can execute, via a set of rules in a rule language (e.g. a SPARQL query over a named graph), or via an external application (e.g. an application that performs and returns the transitive closure of rdfs:subClassOf), the View Realization for a particular view. As in the latter example, view realizations can also realize the implicit semantics of a graph according to some language or schema (e.g. RDFS, OWL, NRL etc.). We refer to such a view as a Semantic View and in <xref linkend="nrl:fig-nrl-graph-views"/> these are represented by the intersection of [<xref linkend="nrl:GraphView"/>] and Graph Roles. Therefore a semantic view is an instance of graph view that also carries a particular graph role. Semantic views are also depicted in <xref linkend="nrl:fig-nrl-overview"/>, and one can quite easily draw a parallel between the two figures. One must note that the property [<xref linkend="nrl:realizes"/>] applies only to semantic views, since only such views realize an explicit form of semantics. One should also note that in contrast to graph roles which have only Declarative Semantics defined through the [<xref linkend="nrl:hasSemantics"/>] property, semantic views also carry Procedural Semantics, since the semantics of these graphs are always realized and not simply assumed. </para>
		
		<section id="nrl:sec-views-core-vocabulary">
			<title>Views Core Vocabulary</title>
			<para>This section presents the core vocabulary supporting views in NRL, consisting of  the core attributes that apply to views. The following section is specifically dedicated to vocabulary concerning the specification of views.</para>
			
			<variablelist>
						<varlistentry>
				<term>nrl:GraphView</term><listitem>
				<para>This class represents a view over a named graph as introduced in this document, and is itself modeled as a subclass of a named graph. A view is realized through a view specification, defined by an instance of [<xref linkend="nrl:ViewSpecification"/>]. The view is linked its view specification through the [<xref linkend="nrl:hasSpecification"/>] property whereas the named graph that the view applies to is linked by [<xref linkend="nrl:viewOn"/>]. An instance of this class will be a realized view over some named graph, and it will consist of the extended or restricted set of RDF triples present in the original named graph. </para>
			</listitem></varlistentry>
			
			<varlistentry>
				<term>nrl:viewOn</term><listitem>
				<para>This property attaches a view realisation to the respective interpreted named graph by linking instances of [<xref linkend="nrl:GraphView"/>] to respective instances of [<xref linkend="nrl:Graph"/>]. In this way, it is always possible to determine which graph a view is interpreting. Thus both the theoritical and the practical separation between different interpretations of a named graph and the original named graph itself can be retained. As a result, it is always possible to retrieve an original named graph, independently of how many views have been applied over it.</para>
			</listitem></varlistentry>
			
			<varlistentry>
				<term>nrl:hasSpecification </term><listitem>
				<para>Views are realized according to a given view specification. This property determines the specification for a view by linking instances of [<xref linkend="nrl:GraphView"/>] to instances of [<xref linkend="nrl:ViewSpecification"/>]. View specifications are defined through instances of [<xref linkend="nrl:ViewSpecification"/>]. This class, its subclasses, attributes and general characteristics are introduced and defined in the following section. </para>
			</listitem></varlistentry>
		
			</variablelist>
			
</section>
	  
		  <section id="nrl:sec-views-specification-vocabulary">
			<title>Views Specification Vocabulary</title>
			<para>This section presents the vocabulary supporting graph view specification. These specification are essentially the instructions to how a view is to be realized.</para>
			
			<variablelist>
					<varlistentry>
			  <term>nrl:ViewSpecification</term><listitem>
			  <para>This class represents a view specification. Every graph view requires an associated view specification. View specifications can take one of two forms, modeled as the two subclasses [<xref linkend="nrl:RuleViewSpecification"/>] and [<xref linkend="nrl:ExternalViewSpecification"/>]. The view specification defines the criteria for the realization of the view. In the case of semantic views, view specifications also state which semantics are realized through the [<xref linkend="nrl:realizes"/>] property.</para>
			</listitem></varlistentry>
			
			<varlistentry>
				<term>nrl:realizes</term><listitem>
				<para>This property applies only to subset of views introduced as semantic views (see <xref linkend="nrl:sec-imposing-semantics-on-and-tailoring-of-graphs-nrl-graph-views-extensions"/> introduction). It links a semantic view to the formal specifications of the semantics that it realizes. In effect this states that the view should carry the realized, procedural semantics according to the given semantics definition, and not simply the implicit declarative semantics. The overlap in <xref linkend="nrl:fig-nrl-graph-views"/> and also in <xref linkend="nrl:fig-nrl-overview"/><xref linkend="nrl:fig-nrl-overview"/>) between graph roles and views refers to these semantic views which carry both procedural (through this property) and declarative (through [<xref linkend="nrl:hasSemantics"/>]) semantics. This property should be distinguished from the [<xref linkend="nrl:hasSemantics"/>] property since this property has only a declarative role when it comes to specifying the semantics for a graph.</para>
				
				<para>Note:For NRL to be valid, all semantic views must carry both procedural and declarative semantics. That is, any view (which can manifest itself also as a graph role) that is linked to some semantics by [<xref linkend="nrl:realizes"/>], should also be linked to the same semantics by [<xref linkend="nrl:hasSemantics"/>]. This relationship between the two properties is not symmetric and it is perfectly valid for a graph role (that is not a view) to have only non-realized declarative semantics.</para>
			</listitem></varlistentry>
			
			<varlistentry>
			  <term>nrl:RuleViewSpecification</term><listitem>
			  <para>This class represents one of the provided forms of view specifications. Views can be specified by referring to a rule language and a corresponding set of required rules within. The view is subsequently realized by executing those rules, generating the required output named graph. The rule language and the selected rules are specified through the [<xref linkend="nrl:ruleLanguage"/>] and [<xref linkend="nrl:rule"/>] properties, presented below.</para>
			</listitem></varlistentry>
			
			<varlistentry>
			  <term>nrl:ruleLanguage</term><listitem>
			  <para>This property links a rule view specification to the name of the rule language supporting the required rules. The rule language is identified via a string referring to the language name.</para>
			</listitem></varlistentry>
			
			<varlistentry>
			  <term>nrl:rule</term><listitem>
			  <para>This property is used to provide the actual rules for a rule view specification, with respect to the selected rule language. The rules (or queries) are provided as a string.</para>
			</listitem></varlistentry>
			
			<varlistentry>
			  <term>nrl:ExternalViewSpecification </term><listitem>
			  <para>The second type of view specification supported by NRL refers to an external application, service or program (external realizer) that automatically executes and returns the required view without the need to select any rule or language. The word &apos;external&apos; refers to the fact that the actual view specification is not given by instances of this class, but is predefined within the external application. External view specifications need only specify the location of the external realizer through the following property.</para>
			</listitem></varlistentry>
			
			<varlistentry>
			  <term>nrl:externalRealizer</term><listitem>
			  <para>External view specifications rely on external realizers to realize a particular view. An identifier for the external application, service or program is assigned to the view specification through this property in the form of a string.</para>
			</listitem></varlistentry>
		
			</variablelist>
			
	  </section>
		  
		  <section id="nrl:sec-graph-views-example">
			<title>Graph Views Example</title>
			<para>The following example is a continuation to that given in [<xref linkend="nrl:sec-named-graph-example"/>] and it completes the dataflow diagram presented in the introduction [<xref linkend="nrl:fig-nrl-dataflow"/>]. It demonstrates how the provided syntax supporting graph views can be used effectively. The practical applicability of the introduced views is explained in more detail in the  introduction of the document and [<xref linkend="nrl:fig-nrl-dataflow"/>].</para>
			<para> [1] ex:kb2_metadata states that a new graph with the role of knowledge base, ex:kb2, is a graph view over graph ex:kb1 defined in the example earlieraccording to a view specification ex:rvs. </para>
			<para> [2] ex:rvs is the view specification required to realize ex:kb2. It is a rule view specification, and it requires executing two rules from the SPARQL language over the graph that ex:kb2 is interpreting, namely ex:kb1. The view is defined as a semantic realizing view, which semantics are given by ex:RDFSSemantics.</para>
			<para> [3] ex:RDFSemantics refers to a document where the formal specification of the procedural semantics realized by the view are given. These semantics are identified by a label, RDFS.</para>
			<para> [4] ex:kb3_metadata states that the graph ex:kb3 having role [<xref linkend="nrl:KnowledgeBase"/>]is a graph view over ex:kb2 according to a view specification ex:evs. </para>
			<para> [5] The view specification for ex:kb3 is defined to consist of an external view specification. This in practice means that no specification is given in the graph definition, but the virtual specification is assumed to be within the external application or service that realizes the view. In this case, GraphTaxonomyExtractor will return the required realized view as the graph ex:kb3.</para>
			<programlisting>
@prefix nrl: &lt;http://www.semanticdesktop.org/ontology/yyyy/mm/dd/nrl#&gt; .
@prefix ex: &lt;http://www.example.org/vocabulary#&gt; .
[1] ex:kb2_metadata { 
			ex:kb2 	rdf:type nrl:KnowledgeBase , 
							nrl:GraphView ;
					nrl:viewOn ex:kb1 ;
					nrl:hasSpecification ex:rvs .
		[2] ex:rvs 	rdf:type nrl:RuleViewSpecification ;
					nrl:realizes ex:RDFSSemantics ;
					nrl:ruleLanguage &quot;SPARQL&quot; ;
					nrl:rule &quot;CONSTRUCT {?s ?rdfs:subClassOf ?v} WHERE ...&quot; ;
					nrl:rule &quot;CONSTRUCT {?s ?rdf:type ?v} WHERE ...&quot; .
		[3] ex:RDFSSemantics rdf:type nrl:Semantics ;
			    nrl:semanticsDefinedBy &quot;http://www.w3.org/TR/2004/REC-rdf-mt-20040210/ ;
			    nrl:semanticsLabel &quot;RDFS&quot; . }
[4] ex:kb3_metadata {
			ex:kb3 rdf:type nrl:GraphView ,
				   nrl:KnowledgeBase ;
			nrl:viewOn ex:kb2 ;
			nrl:hasSpecification ex:evs .
		[5] ex:evs rdf:type nrl:ExternalViewSpecification ;
				nrl:externalRealizer &quot;GraphTaxonomyExtractor&quot; . }
			  </programlisting>
		</section>
	</section>
	
	<section id="nrl:sec-deprecated-elements">
        <title>Deprecated Elements</title>
		<para>In general there are three criteria for excluding elements from NRL:</para>
        <orderedlist>
			<listitem>Elements with no clear formal semantics.</listitem>
			<listitem>Elements whose complexity cannot be handled.</listitem>
			<listitem>Elements that are NEPOMUK project-specific.</listitem>
			<listitem>Elements that do not belong to the Representation Language layer but rather to lower ontology levels.</listitem>
			<listitem>Elements that have become redundant after introduction of the NRL concepts.</listitem>
		</orderedlist>
        <para>The following is a list of elements which have been excluded from NRL. Some of these elements might be moved to other NEPOMUK ontologies, or removed completely. Given in the table are the reasons why they have been excluded from this ontology, alongside the resulting actions taken.</para>
        <informaltable frame="all" xml:id="table44">
          <tgroup cols="2">
            <colspec colname="c1" colwidth="78*"/>
            <colspec colname="c2" colwidth="78*"/>
            <tbody>
              <row>
                <entry><para>nrl:Thing</para></entry>
                <entry><para><emphasis>Description</emphasis></para></entry>
              </row>
              <row>
                <entry morerows="4"><para> </para></entry>
                <entry><para>The superclass of all conceptual classes. See also [<ulink url="http://www.w3.org/TR/swbp-skos-core-spec/">SKOS Concept</ulink>] and [<ulink url="http://www.w3.org/TR/owl-guide/">OWL Thing</ulink>]</para></entry>
              </row>
              <row>
                <entry><para><emphasis>Reason</emphasis></para></entry>
              </row>
              <row>
                <entry><para>rdfs:Resource satisfies the requirements for a top Resource representation.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>Action</emphasis></para></entry>
              </row>
              <row>
                <entry><para>Exclude.</para></entry>
              </row>
              <row>
                <entry><para>nrl:ResourceManifestation</para></entry>
                <entry><para><emphasis>Description</emphasis></para></entry>
              </row>
              <row>
                <entry morerows="4"><para> </para></entry>
                <entry><para>The superclass of all files or web resources. See also [<ulink url="http://www.w3.org/TR/2000/CR-rdf-schema-20000327/#s2.2.1">RDFS Resource</ulink>]</para></entry>
              </row>
              <row>
                <entry><para><emphasis>Reason</emphasis></para></entry>
              </row>
              <row>
                <entry><para>Distinction between abstract resource and information resource not required at this level.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>Action</emphasis></para></entry>
              </row>
              <row>
                <entry><para>Move to upper-level (foundational) ontology.</para></entry>
              </row>
              <row>
                <entry><para>nrl:Association</para></entry>
                <entry><para><emphasis>Description</emphasis></para></entry>
              </row>
              <row>
                <entry morerows="4"><para> </para></entry>
                <entry><para>The superclass of n-ary relations. See also [<ulink url="http://www.topicmaps.org/xtm/#desc-association">Topic Maps Association</ulink>]</para></entry>
              </row>
              <row>
                <entry><para><emphasis>Reason</emphasis></para></entry>
              </row>
              <row>
                <entry><para>Not required at this level.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>Action</emphasis></para></entry>
              </row>
              <row>
                <entry><para>Move to upper-level (foundational) ontology.</para></entry>
              </row>
              <row>
                <entry><para>nrl:AssociationRole</para></entry>
                <entry><para><emphasis>Description</emphasis></para></entry>
              </row>
              <row>
                <entry morerows="4"><para> </para></entry>
                <entry><para>The superclass of relations for N-ary associations. See also [<ulink url="http://www.topicmaps.org/xtm/#desc-association">Topic Maps Association</ulink>]</para></entry>
              </row>
              <row>
                <entry><para><emphasis>Reason</emphasis></para></entry>
              </row>
              <row>
                <entry><para>Not required at this level.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>Action</emphasis></para></entry>
              </row>
              <row>
                <entry><para>Move to upper-level (foundational) ontology.</para></entry>
              </row>
              <row>
                <entry><para>nrl:NRLClass</para></entry>
                <entry><para><emphasis>Description</emphasis></para></entry>
              </row>
              <row>
                <entry morerows="4"><para> </para></entry>
                <entry><para>The NRL&apos;s own class to enable specific extensions.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>Reason</emphasis></para></entry>
              </row>
              <row>
                <entry><para>No specific restrictions in this ontology requiring an extra class representation.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>Action</emphasis></para></entry>
              </row>
              <row>
                <entry><para>Move to upper-level(foundational) ontology if required.</para></entry>
              </row>
              <row>
                <entry><para>nrl:NRLProperty</para></entry>
                <entry><para><emphasis>Description</emphasis></para></entry>
              </row>
              <row>
                <entry morerows="4"><para> </para></entry>
                <entry><para>The NRL&apos;s own property to enable specific extensions.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>Reason</emphasis></para></entry>
              </row>
              <row>
                <entry><para>No specific restrictions in this ontology requiring an extra property representation.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>Action</emphasis></para></entry>
              </row>
              <row>
                <entry><para>Move to upper-level(foundational) ontology if required.</para></entry>
              </row>
              <row>
                <entry><para>nrl:DescribingProperty</para></entry>
                <entry><para><emphasis>Description</emphasis></para></entry>
              </row>
              <row>
                <entry morerows="4"><para> </para></entry>
                <entry><para>This class defines a class instance to be descriptive rather than relational. Descriptive properties cannot have an inverse. See also [<ulink url="http://www.w3.org/TR/2004/REC-owl-guide-20040210/#DefiningProperties">OWL DatatypeProperty</ulink>]</para></entry>
              </row>
              <row>
                <entry><para><emphasis>Reason</emphasis></para></entry>
              </row>
              <row>
                <entry><para>Distinction between descriptive and relational properties not required at this level.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>Action</emphasis></para></entry>
              </row>
              <row>
                <entry><para>Move to upper-level (foundational) ontology.</para></entry>
              </row>
              <row>
                <entry><para>nrl:RelatingProperty</para></entry>
                <entry><para><emphasis>Description</emphasis></para></entry>
              </row>
              <row>
                <entry morerows="4"><para> </para></entry>
                <entry><para>This class defines a class instance to be relational rather than descriptive. Only relational properties can have an inverse. See also [<ulink url="http://www.w3.org/TR/2004/REC-owl-guide-20040210/#DefiningProperties">OWL ObjectProperty</ulink>]</para></entry>
              </row>
              <row>
                <entry><para><emphasis>Reason</emphasis></para></entry>
              </row>
              <row>
                <entry><para>Distinction between descriptive and relational properties not required at this level.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>Action</emphasis></para></entry>
              </row>
              <row>
                <entry><para>Move to upper-level (foundational) ontology.</para></entry>
              </row>
              <row>
                <entry><para>nrl:hasNamespace</para></entry>
                <entry><para><emphasis>Description</emphasis></para></entry>
              </row>
              <row>
                <entry morerows="4"><para> </para></entry>
                <entry><para>Specifies the standard namespace for an ontology with particular attention to the hash or slash problem.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>Reason</emphasis></para></entry>
              </row>
              <row>
                <entry><para>Not required at this level.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>Action</emphasis></para></entry>
              </row>
              <row>
                <entry><para>Move to Ontology Metadata Layer provided semantics are clear.</para></entry>
              </row>
              <row>
                <entry><para>nrl:hasNamespaceAbbreviation</para></entry>
                <entry><para><emphasis>Description</emphasis></para></entry>
              </row>
              <row>
                <entry morerows="4"><para> </para></entry>
                <entry><para>Provides a means to specify the standard abbreviation for an ontology&apos;s namespace.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>Reason</emphasis></para></entry>
              </row>
              <row>
                <entry><para>Not required at this level.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>Action</emphasis></para></entry>
              </row>
              <row>
                <entry><para>Move to Ontology Metadata Layer provided semantics are clear.</para></entry>
              </row>
              <row>
                <entry><para>nrl:isDefinedBy</para></entry>
                <entry><para><emphasis>Description</emphasis></para></entry>
              </row>
              <row>
                <entry morerows="4"><para> </para></entry>
                <entry><para>A standard for stating which ontology defines a ontology element, to enable more efficient queries.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>Reason</emphasis></para></entry>
              </row>
              <row>
                <entry><para>Not required at this level.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>Action</emphasis></para></entry>
              </row>
              <row>
                <entry><para>Move to Ontology Metadata Layer provided semantics are clear.</para></entry>
              </row>
              <row>
                <entry><para>nrl:directType</para></entry>
                <entry><para><emphasis>Description</emphasis></para></entry>
              </row>
              <row>
                <entry morerows="4"><para> </para></entry>
                <entry><para>Specifies that a type is a direct type and not a type resulting from transitivity.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>Reason</emphasis></para></entry>
              </row>
              <row>
                <entry><para>Not required since the introduction of Graph Views.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>Action</emphasis></para></entry>
              </row>
              <row>
                <entry><para>Unclear</para></entry>
              </row>
              <row>
                <entry><para>nrl:directSubClass</para></entry>
                <entry><para><emphasis>Description</emphasis></para></entry>
              </row>
              <row>
                <entry morerows="4"><para> </para></entry>
                <entry><para>Specifies a direct subclass of some class and not a subclass resulting from transitivity.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>Reason</emphasis></para></entry>
              </row>
              <row>
                <entry><para>Not required since the introduction of Graph Views.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>Action</emphasis></para></entry>
              </row>
              <row>
                <entry><para>Unclear</para></entry>
              </row>
              <row>
                <entry><para>nrl:directSubProperty</para></entry>
                <entry><para><emphasis>Description</emphasis></para></entry>
              </row>
              <row>
                <entry morerows="4"><para> </para></entry>
                <entry><para>Specifies a direct subproperty of some property and not a subproperty resulting from transitivity.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>Reason</emphasis></para></entry>
              </row>
              <row>
                <entry><para>Not required since the introduction of Graph Views.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>Action</emphasis></para></entry>
              </row>
              <row>
                <entry><para>Unclear</para></entry>
              </row>
              <row>
                <entry><para>nrl:altLabel</para></entry>
                <entry><para><emphasis>Description</emphasis></para></entry>
              </row>
              <row>
                <entry morerows="4"><para> </para></entry>
                <entry><para>The alternative labels for a resource. A thesauri requirement in conjunction with [<ulink url="http://www.w3.org/TR/rdf-schema/#ch_label">rdfs:label</ulink>]. See also [<ulink url="http://www.w3.org/TR/swbp-skos-core-spec/">skos:altLabel</ulink>]</para></entry>
              </row>
              <row>
                <entry><para><emphasis>Reason</emphasis></para></entry>
              </row>
              <row>
                <entry><para>This is an annotation property.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>Action</emphasis></para></entry>
              </row>
              <row>
                <entry><para>Move to annotation ontology.</para></entry>
              </row>
              <row>
                <entry><para>nrl:defaultValues</para></entry>
                <entry><para><emphasis>Description</emphasis></para></entry>
              </row>
              <row>
                <entry morerows="4"><para> </para></entry>
                <entry><para>The default value/s for a property assigned to instances of a class. Comparable to Protégé&apos;s defaultValues slot attribute.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>Reason</emphasis></para></entry>
              </row>
              <row>
                <entry><para>Not required at this level.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>Action</emphasis></para></entry>
              </row>
              <row>
                <entry><para>Move to general view ontology.</para></entry>
              </row>
              <row>
                <entry><para>nrl:hasPart</para></entry>
                <entry><para><emphasis>Description</emphasis></para></entry>
              </row>
              <row>
                <entry morerows="4"><para> </para></entry>
                <entry><para>This defines a resource as having a subset resource. </para></entry>
              </row>
              <row>
                <entry><para><emphasis>Reason</emphasis></para></entry>
              </row>
              <row>
                <entry><para>No clear formal semantics.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>Action</emphasis></para></entry>
              </row>
              <row>
                <entry><para>Exclude.</para></entry>
              </row>
              <row>
                <entry><para>nrl:partOf</para></entry>
                <entry><para><emphasis>Description</emphasis></para></entry>
              </row>
              <row>
                <entry morerows="4"><para> </para></entry>
                <entry><para>This defines a resource as being a subset of another. </para></entry>
              </row>
              <row>
                <entry><para><emphasis>Reason</emphasis></para></entry>
              </row>
              <row>
                <entry><para>No clear formal semantics.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>Action</emphasis></para></entry>
              </row>
              <row>
                <entry><para>Exclude.</para></entry>
              </row>
              <row>
                <entry><para>nrl:hasTopic</para></entry>
                <entry><para><emphasis>Description</emphasis></para></entry>
              </row>
              <row>
                <entry morerows="4"><para> </para></entry>
                <entry><para>This states the topic of a resource. See also [<ulink url="http://www.w3.org/TR/swbp-skos-core-spec/">SKOS isSubejctOf</ulink>]</para></entry>
              </row>
              <row>
                <entry><para><emphasis>Reason</emphasis></para></entry>
              </row>
              <row>
                <entry><para>Not required at this level.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>Action</emphasis></para></entry>
              </row>
              <row>
                <entry><para>Move to annotation ontology.</para></entry>
              </row>
              <row>

                <entry><para>nrl:isTopicOf</para></entry>
                <entry><para><emphasis>Description</emphasis></para></entry>
              </row>
              <row>
                <entry morerows="4"><para> </para></entry>
                <entry><para>This states the resource attributed to a topic. See also [<ulink url="http://www.w3.org/TR/swbp-skos-core-spec/">SKOS isSubjectOf</ulink>]</para></entry>
              </row>
              <row>
                <entry><para><emphasis>Reason</emphasis></para></entry>
              </row>
              <row>
                <entry><para>Not required at this level.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>Action</emphasis></para></entry>
              </row>
              <row>
                <entry><para>Move to annotation ontology.</para></entry>
              </row>
              <row>
                <entry><para>nrl:occurrence</para></entry>
                <entry><para><emphasis>Description</emphasis></para></entry>
              </row>
              <row>
                <entry morerows="4"><para> </para></entry>
                <entry><para>This points to an instance of a specific resource. See also [<ulink url="http://www.topicmaps.org/xtm/#desc-occurrence">Topic Maps Occurences</ulink>] and [<ulink url="http://www.w3.org/TR/swbp-skos-core-spec/">SKOS hasSubject</ulink>]</para></entry>
              </row>
              <row>
                <entry><para><emphasis>Reason</emphasis></para></entry>
              </row>
              <row>
                <entry><para>No formal semantics.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>Action</emphasis></para></entry>
              </row>
              <row>
                <entry><para>Exclude.</para></entry>
              </row>
              <row>
                <entry><para>nrl:isOccurenceOf</para></entry>
                <entry><para><emphasis>Description</emphasis></para></entry>
              </row>
              <row>
                <entry morerows="4"><para> </para></entry>
                <entry><para>This points to a resource classifying this and other similar instances. See also [<ulink url="http://www.topicmaps.org/xtm/#desc-occurrence">Topic Maps Occurences</ulink>] and [<ulink url="http://www.w3.org/TR/swbp-skos-core-spec/">SKOS hasSubject</ulink>]</para></entry>
              </row>
              <row>
                <entry><para><emphasis>Reason</emphasis></para></entry>
              </row>
              <row>
                <entry><para>No formal semantics.</para></entry>
              </row>
              <row>
                <entry><para><emphasis>Action</emphasis></para></entry>
              </row>
              <row>
                <entry><para>Exclude.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </section>
    </section>
<section id="nrl:sec-nrl-semantics" xmlns="http://docbook.org/ns/docbook">
      <title>NRL Semantics</title>
      <para>Note: The Semantics of NRL will be formally specified at a later version of the language.</para>
    </section>
<section id="nrl:sec-references" xmlns="http://docbook.org/ns/docbook">
      <title>References </title>
      <para>[NAMED GRAPHS]</para>
      <variablelist>
        <varlistentry>
          <term/>
          <listitem>
            <para><ulink url="http://www2005.org/cdrom/docs/p613.pdf">Named Graphs, Provenance and Trust</ulink>,  J. J. Carroll, C. Bizer, P. Hayes and P. Stickler, Proceedings of WWW2005, May 2005, Japan.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term/>
          <listitem>
            <para><ulink url="http://www.w3.org/DesignIssues/Notation3">http://www.w3.org/2004/03/trix/</ulink>.</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <variablelist>
        <varlistentry>
          <term>[NOTATION3]</term>
          <listitem>
            <para><ulink url="http://www.w3.org/DesignIssues/Notation3">A readable language for data on the Web</ulink>. Tim Berners-Lee, Editor.</para>
            <para><ulink url="http://www.w3.org/DesignIssues/Notation3">http://www.w3.org/DesignIssues/Notation3</ulink>.</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <variablelist>
        <varlistentry>
          <term>[N-TRIPLES] </term>
          <listitem>
            <para><ulink url="http://www.w3.org/TR/2004/REC-rdf-testcases-20040210/">N-Triples</ulink> section in [<link linkend="nrl:sec-references">RDF Specification - Tests</link>] </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>[OMV Report]</para>
      <para><ulink url="http://ontoware.org/projects/omv/">Ontology Metadata Vocabulary for the Semantic. Web</ulink></para>
      <para>. Jens Hartmann (University of Karlsruhe), Raul Palma (Universidad Politecnica de Madrid) and Elena Paslaru Bontas (Free University of Berlin).</para>
      <para><ulink url="http://ontoware.org/projects/omv/">http://ontoware.org/projects/omv/</ulink>. [OWL Overview] <ulink url="http://www.w3.org/TR/owl-features/">OWL Web Ontology Language Overview</ulink>.Deborah L. McGuinness and Frank van Harmelen, Editors, W3C Recommendation, 10 February 2004, </para>
      <para><ulink url="http://www.w3.org/TR/owl-features/">http://www.w3.org/TR/owl-features/</ulink>.</para>
      <para><variablelist>
          <varlistentry>
            <term>[RDF]</term>
            <listitem>
              <para><ulink url="http://www.w3.org/RDF/">Resource Description Framework</ulink></para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term/>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>[RDF Specification - PRIMER]</term>
            <listitem>
              <para><ulink url="http://www.w3.org/TR/rdf-primer/">RDF Primer</ulink>, Frank Manola and Eric Miller, Editors, W3C Recommendation, 10 February 2004, <ulink url="http://www.w3.org/TR/2004/REC-rdf-primer-20040210/">http://www.w3.org/TR/2004/REC-rdf-primer-20040210/</ulink>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term/>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>[RDF Specification - SYNTAX]</term>
            <listitem>
              <para><ulink url="http://www.w3.org/TR/rdf-syntax-grammar/">RDF/XML Syntax Specification</ulink>, Dave Beckett, Editor, W3C Recommendation, 10 February 2004, <ulink url="http://www.w3.org/TR/2004/REC-rdf-syntax-grammar-20040210/"> http://www.w3.org/TR/2004/REC-rdf-syntax-grammar-20040210/</ulink>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term/>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>[RDF Specification - CONCEPTS]</term>
            <listitem>
              <para><ulink url="http://www.w3.org/TR/rdf-concepts/">Resource Description Framework (RDF): Concepts and Abstract Syntax</ulink>, Graham Klyne and Jeremy J. Carroll, Editors, W3C Recommendation, 10 February 2004, </para>
              <para><ulink url="http://www.w3.org/TR/2004/REC-rdf-concepts-20040210/">http://www.w3.org/TR/2004/REC-rdf-concepts-20040210/</ulink>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term/>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>[RDF Specification - SEMANTICS]</term>
            <listitem>
              <para><ulink url="http://www.w3.org/TR/rdf-mt/">RDF Semantics</ulink>, Patrick Hayes, Editor, W3C Recommendation, 10 February 2004, <ulink url="http://www.w3.org/TR/2004/REC-rdf-mt-20040210/"> http://www.w3.org/TR/2004/REC-rdf-mt-20040210/</ulink>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term/>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>[RDF Specification - MS]</term>
            <listitem>
              <para><ulink url="http://www.w3.org/TR/1999/REC-rdf-syntax-19990222/">Resource Description Framework (RDF) Model and Syntax</ulink>, W3C Recommendation, 22 February 1999</para>
              <para><ulink url="http://www.w3.org/TR/1999/REC-rdf-syntax-19990222/">http://www.w3.org/TR/1999/REC-rdf-syntax-19990222/</ulink>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term/>
            <listitem>
              <para/>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>[RDF Specification - TESTS]</term>
            <listitem>
              <para><ulink url="http://www.w3.org/TR/rdf-testcases/">RDF Test Cases</ulink>, Jan Grant and Dave Beckett, Editors, W3C Recommendation, 10 February 2004, <ulink url="http://www.w3.org/TR/2004/REC-rdf-testcases-20040210/"> http://www.w3.org/TR/2004/REC-rdf-testcases-20040210/</ulink>.</para>
            </listitem>
          </varlistentry>
        </variablelist>
<variablelist>
          <varlistentry>
            <term>[RDFS Specification]</term>
            <listitem>
              <para><ulink url="http://www.w3.org/TR/rdf-schema/">RDF Vocabulary Description Language 1.0: RDF Schema</ulink>, Dan Brickley, R.V. Guga, Brian McBride, W3C Recommendation, 10 February 2004, </para>
              <para><ulink url="http://www.w3.org/TR/2004/REC-rdf-primer-20040210/">http://www.w3.org/TR/2004/REC-rdf-primer-20040210/</ulink>.</para>
            </listitem>
          </varlistentry>
        </variablelist>
[SPARQL-QUERY]<ulink url="http://www.w3.org/TR/2005/WD-rdf-sparql-query-20051123/">SPARQL Query Language for RDF</ulink>, E. Prud&apos;hommeaux, A. Seaborne, Editors. World Wide Web Consortium. 23 November 2005. Work in progress. This version is http://www.w3.org/TR/2005/WD-rdf-sparql-query-20051123/. <ulink url="http://www.w3.org/TR/rdf-sparql-query/">http://www.w3.org/TR/rdf-sparql-query/</ulink>.</para>
      <para>[TRIG]<ulink url="http://www.wiwiss.fu-berlin.de/suhl/bizer/TriG/">TriG Syntax</ulink>, Chris Bizer, Freie Universität Berlin extends Turtle to serialise [<link linkend="nrl:sec-references">NAMED GRAPHS</link>] <ulink url="http://sites.wiwiss.fu-berlin.de/suhl/bizer/TriG/">http://sites.wiwiss.fu-berlin.de/suhl/bizer/TriG/</ulink></para>.<variablelist>
          <varlistentry>
            <term>[TURTLE]</term>
            <listitem>
              <para><ulink url="http://www.dajobe.org/2004/01/turtle/">Terse - RDF Triple language</ulink>. Dave Beckett, Editor. 04 December 2004.</para>
              <para><ulink url="http://www.dajobe.org/2004/01/turtle/">http://www.dajobe.org/2004/01/turtle/</ulink>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term/>
            <listitem>
              <simpara/>
            </listitem>
          </varlistentry>
        </variablelist>
<variablelist>
          <varlistentry>
            <term/>
            <listitem>
              <para><variablelist>
                  <varlistentry>
                    <term/>
                    <listitem>
                      <para/>
                    </listitem>
                  </varlistentry>
                </variablelist>
</para>
            </listitem>
          </varlistentry>
        </variablelist>
</section>
